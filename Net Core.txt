1.Startup类
	理论：Startup 类可以用来定义请求处理管道和配置应用程序需要的服务

	Startup 类包含以下两个方法：
		ConfigureServices：方法用于定义应用程序所需要的服务，例如 ASP.NET Core MVC 、 Entity Framework Core 和 Identity 等等
		
		Configure：用于定义请求管道中 中间件 的执行顺序
	
	不使用 Startup 类的情况下 配置 Configure
		Host.CreateDefaultBuilder(args)
			.ConfigureAppConfiguration((hostingContext, config) =>
            {
            })
			.ConfigureWebHostDefaults(webBuilder =>
            {
				webBuilder
				.ConfigureServices(services =>
                {})
				.Configure(app =>
                {})
			})
			
		多次使用 ConfigureServices 方法会依次追加 Services
		多次使用 Configure 方法会替代
		
	IStartupFilter：
		用途：想要在中间件管道开头或者结尾 配置中间件 并且无需显示调用 UseXXX 那么就用此方法扩展 Startup
		
		Startup过滤器 他就像是一个 抽离出来的 Configure 方法 可以通过他扩展 Startup
		// 声明 AppendHelloWorldStartupFilter
		public class RequestSetOptionsStartupFilter : IStartupFilter
			// 重写 Configure 方法
			public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
			// 该方法 传入了一个 Action<IApplicationBuilder> 也需要返回一个 Action<IApplicationBuilder> 咱们返回一个 lambda 表达式
				return builder => {
					builder.UseMiddleware<RequestSetOptionsMiddleware>();
					next(builder);
				}
		
		// 声明一个自定义中间件
		public class RequestSetOptionsMiddleware
			private readonly RequestDelegate _next;
			public RequestSetOptionsMiddleware(RequestDelegate next)	// 构造函数传入 next 委托 用于 next(HttpContext) 进入下一个中间件
			{
				_next = next;
			}
			// 实现 Invoke 方法 HttpContext 会通过该方法(或者是 InvokeAsync )进入自定义的中间件
			public async Task Invoke(HttpContext httpContext)
			{
				var option = httpContext.Request.Query["option"];
				if (!string.IsNullOrWhiteSpace(option))
				{
					httpContext.Items["option"] = option;
				}
				await _next(httpContext);
			}
		
		在 Program 类中
			Host.CreateDefaultBuilder(args)		想要在开始时注册的话 那么就在调用 CreateDefaultBuilder 方法后 就调用 ConfigureServices 注册扩展
			.XXX()
			.ConfigureServices(services =>
			{
				services.AddTransient<IStartupFilter, RequestSetOptionsStartupFilter>();
			})
	
	基于环境运行不同的 Configure 和 ConfigureServices
		Configure 和 ConfigureServices 支持 Configure<EnvironmentName> 和 Configure<EnvironmentName>Services
		launchSettings.json 配置：
			... 省略部分代码
			"environmentVariables": {
				"ASPNETCORE_ENVIRONMENT": "Test"
			}
		
        public void ConfigureTestServices(IServiceCollection services)
        {
            Console.WriteLine("Test:");
            services.AddControllers();
        }
		public void ConfigureTest(IApplicationBuilder app, IWebHostEnvironment env) { ... }
		
		public void ConfigureServices(IServiceCollection services) { ... }
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... }
	
2.依赖注入：
	在 ConfigureServices 中注册的服务 都可以在 Configure 中注入
		在 ConfigureServices 中注册：
			services.AddDbContext<TestNetCoreDbContext>(...);
			注： EFCore 一般生成周期都是以范围注册 可以设置重载 ServiceLifetime.Singleton 改为单例
			
		在 Configure 中注入：
			public void Configure(IApplicationBuilder app, IWebHostEnvironment env, TestNetCoreDbContext context)
			{
				context.XXXX();
			}

	也可以在 控制器 中注入
		接口文件(用于抽象依赖类)
			public interface IMyDependency
				void WriteMessage(string message);
		
		实现类
			public class MyDependency : IMyDependency
				public void WriteMessage(string message){ ... }
		
		在 ConfigureServices 中注册：
			services.AddScoped<IMyDependency, MyDependency>(); // 注册单个生存周期的服务
			
		控制器注入：
			public XXXController(ILogger<WeatherForecastController> logger, IMyDependency Dependency)
	
	服务注册多个实例时：
		services.AddScoped<IMyDependency, MyDependency>();
		services.AddScoped<IMyDependency, MyDependency2>();
		
		按照顺序后者实例会覆盖前者实例
		
		中间件构造函数解析
			public RequestSetOptionsMiddleware(RequestDelegate next, IMyDependency Dependency, IEnumerable<IMyDependency> Dependencies)
			前者单个的 IMyDependency 解析出来的实例时 MyDependency
			后者 IEnumerable<T> 解析出来的是所有依赖于 IMyDependency 注册的实例

	服务生存期：
		瞬态服务(Transient)：基于函数的服务 不同函数间使用的不是同一个服务
	
		范围服务(Scoped)：基于请求的服务 不同的请求使用的不是同一个服务
			要在中间件中使用范围内服务,将范围服务注入到 中间件的 Invoke 或 InvokeAsync 中,使用构造函数注入会引发异常,因为它强制使范围内服务的行为与单一实例类似
			注解：简单来说,就是方法才是基于范围的 而通过构造函数注入 那么将变成类中公用的 那么该范围服务想和单例没什么区别了
		
		单例服务(Singleton)：基于应用的服务 全应用使用一个服务
	
	脱离服务容器创建的服务：
		services.AddSingleton(new MyDependency());
		注：
			服务实例不是由服务容器创建的。
			框架不会自动释放服务。
			开发人员负责释放服务。
	
	服务注入行为：
		IServiceProvider：原本的DI容器,用于构造函数注入使用
		ActivatorUtilities：一个通过容器创建实例的帮助类,创建未在容器中注册的对象,与一些框架特性一起使用
			例：在 中间件 中使用
			Invoke方法：
				var Dependency = (IMyDependency)ActivatorUtilities.CreateInstance(httpContext.RequestServices, typeof(MyDependency));
				Dependency.WriteMessage();
				
			但我们通常不这样使用 在迫不得已的情况下 可以选择这种方法
			
		注：无论是使用哪种行为 要解析服务的类 都必须含有一个 所有参数都可以通过DI容器注入实现的 构造函数
	
2.中间件
	中间件可以看成一个流水线 物品(Request) 进入中间件 在该中间件中可以判断是否可以进入下一个中间件 如果不可以进入 那么就将会退回去 当前物品(Request) 会变成另一个物品(Response) 按照来时的路线一次返回 反之 再次进入下一个中间件 进行以上操作
	
	框架中提供了尽可能简单的 单个请求委托 这种不包括管道的操作 调用单个匿名函数以响应每个 HTTP 请求 
	Run 委托不会收到 next 参数。 第一个 Run 委托始终为终端，用于终止管道。 Run 是一种约定 即短路中间件
		app.Run(async context =>
        {
            await context.Response.WriteAsync("Hello, World!");
        });
	
	使用 Use 将多个请求委托连接在一起
		app.Use(async (context, next) =>
        {
			// 进入下一个中间件前做的操作
            await next.Invoke();
			// 当 Response 回退到当前中间件时做的操作,HasStarted 是一个有用的提示，指示是否已发送标头或已写入正文
			// httpContext.Response.HasStarted 为true,切记不要对 Response 进行修改, 请考虑在进入下一个中间件前做修改
        });
	
		注：当委托不将请求传递给下一个委托时，它被称为“让请求管道短路”
	
	对中间件管道进行分支
		Map方式匹配到的 路径端 例：map1 map2 会从 HttpRequest.Path 删除 追加到 HttpRequest.PathBase
		
		如果请求路径以给定路径开头,则执行分支：
			HandleMapTest1(IApplicationBuilder app)
				 app.Run(委托...)
				 
			HandleMapTest2(IApplicationBuilder app)
				 app.Run(委托...)
				 
			Configure方法：
				app.Map("/map1", HandleMapTest1);
				app.Map("/map2", HandleMapTest2);
			
		Map 支持嵌套,例如：
			app.Map("/level1", level1App => {
				level1App.Map("/level2a", level2AApp => {
					// "/level1/level2a" processing
				});
				level1App.Map("/level2b", level2BApp => {
					// "/level1/level2b" processing
				});
			});
		
		Map 也还可以匹配多个路径段：app.Map("/map1/seg1",方法)
		
		MapWhen 支持按照条件来分支 app.MapWhen(context=>context.Request.Query["Name"] = "张三",方法)
		
		UseWhen 支持按条件来分支 但与 MapWhen 不同的是 他不发生短路和包含终端中间件 会再返回主管道中继续执行

3.主机
	

3.静态文件
	wwwroot：如果没有额外的配置,那么该文件夹将是应用程序中唯一可以存放静态文件的位置
	
	默认页面：
		非开发模式：IIS默认文件列表设置
	
		开发模式：
			采用中间件 UseDefaultFiles
			如果是MVC开发：
				用 UseMvcWithDefaultRoute 或者 UseMvc
	
4.MVC的开发
	理论：Net Core 2.1里面集成了MVC的程序集只需要注册相应的中间件和服务即可
	
	将项目改为MVC开发步骤：
		1.创建Controller文件夹
		2.创建HomeController控制器
		3.添加index方法
		4.注册中间件 UseMvcWithDefaultRoute
		5.注册MVC服务 services.AddMvc()
	
		运行即可看到页面...
	
	重要文件说明：
		查看NetCore源码：
			Git方式：F12定位方法查看类名,然后复制类名去微软官方的git仓库查找这个文件,然后再复制方法名到文件中搜索
			VS2019：工具-->选项-->代码编辑器-->C#-->高级
		Program.cs：
			基于WebHost的Net Core启动原理：
				CreateDefaultBuilder
					Startup类中 Configure 方法参数app和env的注入来源：在 WebHost.CreateDefaultBuilder 方法内,实例化了 WebHostBuild 类,在该类中注入了 serviceCollection.AddTransient<IApplicationBuilder> 工厂
					当实例化 WebHostBuild 类后
					调用 UseContentRoot：设置静态资源和动态资源的目录(要去哪里寻找视图、js、css、img文件)
					调用 UseConfiguration：该方法是获取命令行运行时的参数,带入到 Startup 类中
					调用 UseKestrel：该方法是在程序内部运行 Kestrel 作为自身的 HttpServer 来处理 HTTP 请求
					调用 ConfigureAppConfiguration：获取 appsettings.json 配置信息
						 上级调用 AddUserSecrets：如果这是一个开源项目,每个人拷贝下来,都有每个人的服务器、SSO、或者私钥的配置,那么就可以通过右键项目-->管理用户机密来设置这些信息,当然,这些信息并不会上传到git仓库
						 上级调用 AddEnvironmentVariables：环境变量
					调用 ConfigureLogging：该方法是日志,添加了配置文件中的服务日志、控制台、DeBug、事件日志
					调用 ConfigureServices：该方法进行 Startup 类中同名方法进行服务处理并配置一下方法内的默认配置,即服务注入
				
				UseStartup<Startup>()：在此方法中注入服务、中间件
				
				Run：当启动之后,会阻塞调用线程直到程序关闭,控制台中的提示消息也是在该方法中提示的
				
		Startup.cs：
			配合program做一些独立配置的一些文件
		
		进程内和进程外：
			在此的进程指的是 IIS Express Worker Process
			进程内：Net Core 进程内(inProcess)托管,进程内托管可依靠 IIS 获得更高的吞吐量
			进程外：Net Core 进程外(out of Process)托管,使用内部的 kestrel
			
			在Core项目的 csproj 文件中 会有一个叫做 AspNetCoreHostingModel 的节点,值有 InProcess 和 OutOfProcess 两种选择,当值为 OutOfProcess 时,如果还是以IIS启动的话,因为 kestrel 是要配合一个反向代理服务器使用的,那么此时IIS会变成反向代理服务器的形式运行,验证IIS时反向代理服务器还是应用服务器,在客户端(也就是浏览器)查看NetWork请求,在 Response 的请求中会有一个 Server：kestrel 表示当前应用服务器是 kestrel
			
			进程内托管问题：在本地可以完美运行,但发布到IIS就无法运行了,大多是路径问题,因为进程外托管的话,整个目录是在dotnet执行时确定的,进程内的话,因为w3we.exe文件在C盘,所以容易出现路径不对的问题,所以尽量使用进程外运行
		
	JWT鉴权：
		我们来看一下JWT的流程：
			服务端颁发 ToKen -->客户端访问API携带 ToKen 也就是在Header中携带键为 Authorization 值为 Bearer ToKen值-->服务端效验
			上面流程的在 Net Framework MVC 中,需要一个过滤器并在方法或者控制器上方打上自定义特性标记([JWTattr])来效验JWT,而在 Net Core 中,是以中间件的方式来的,请参考以下代码
			颁发 Token：
														  此处的方法是将 JwtSecurityToken 对象来输出成一个ToKen
				var token = new JwtSecurityTokenHandler().WriteToken(new JwtSecurityToken(		--JwtSecurityToken 对象是用来配置 声明(Payload)、颁发者(issuer)、订阅者(audience)、有效时间(expires)、数字签名[也就是对JWT的算法(signingCredentials)]
					claims: new Claim[] {	--在这里 Claim 的类型有两种、ClaimTypes(微软内置的 Payload 字段名)、JwtRegisteredClaimNames(JWT内置封装的 Payload 字段名)
						new Claim(ClaimTypes.Name,"balabala"),
						new Claim(JwtRegisteredClaimNames.Email,"balabala@qq.com"),
						new Claim(JwtRegisteredClaimNames.Sid,"1001"),
						new Claim(ClaimTypes.Role,"Staff")
					},
					issuer: "taba",
					audience: "er",
					expires: DateTime.Now.AddDays(1),
					signingCredentials: new SigningCredentials(new SymmetricSecurityKey(Encoding.UTF8.GetBytes("balabalabalabala")), SecurityAlgorithms.HmacSha256)));
			
			效验 ToKen：
				在这里效验 ToKen 变成了中间件的方式(在方法或者控制器上打 Net Core 内置特性 [Authorize],该方式是无状态的,即无论什么角色都可以访问,另一种 [Authorize(Roles="Admin") 代表只有 Admin 角色才可以使用]),效验JWT时 颁发者、订阅者、数字签名、必须一样才能通过验证
				注册服务：
					services.AddAuthentication("Bearer")		--开启 Bearer 验证
						.AddJwtBearer(b =>		--注册JWT服务
						b.TokenValidationParameters = new TokenValidationParameters()	--参数效验配置,一般像这些配置信息都会写在配置文件中以方便配置
						{
							ValidateIssuerSigningKey = true,	--是否开启对数字签名的效验
							ValidateIssuer = true,				--是否开启对颁发者的效验
							ValidateAudience = true,			--是否开启对订阅者的效验
							ValidIssuer = "taba",				--配置颁发者信息
							ValidAudience = "er",				--配置订阅者信息
							IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("balabalabalabala"))		--配置数字签名的信息
						});
						
				开启中间件：app.UseAuthentication();
			
			在API中获取 Token值的方法：User.FindFirst(d => d.Type == ClaimTypes.Name).Value,其原理是 客户端请求会携带 Bearer ,Net Core 会将 HttpContext 中获取到的 Bearer 解析,并放入 User.Claims 属性中
			
			注意事项：因为 JWT 和 Net Core 内置的 Claim 字段名会有冲突,Net Core 中 Claim配置映射 会将 JWT 中的 Payload 的字段名替换掉,在注册 JWT 服务之前加上这么一行代码 JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear() 取消 Net Core 的映射
			
		依赖注入：
			IOC控制反转：该名词指的是一种思想
			DI依赖注入：该名词指的是实现IOC的一种设计方法
			
			三种注入方法：
				构造函数注入
				属性注入
				方法注入
				
			三种生命周期注册注意要保持一致
				AddTransient：每次注入都会创建一个转瞬即逝的服务
				AddScoped：是按范围创建的,在Web应用程序中,每个请求都会创建一个独立的服务范围
				AddSingleton：应用级别的单例服务,这通常意味着它们在每个应用程序只创建一次,然后用于整个应用程序生命周期
			
			依赖注入的好处：
				只修改配置文件,不重启服务器
				减少代码量：在类中需要实例的对象封装成属性,注入进来
				防止重构：添加或者修改功能只需要修改配置
				忽略内部复杂依赖：不用再去管更深层次的依赖
				管理生命周期：防止内存泄露
				单元测试：Mock
				方便代理：配合AOP
				
5.属性路由
	[Route("[controller]")]
    public class AboutController
    {
        public AboutController()
        {
        }

        [Route("")]				--此处留空的话那么当前Action为默认页面
        public string Phone()
        {
            return "+10086"; 
        }  

        [Route("[action]")]
        public string Country()
        {
            return "mlbz"; 
        }
    }
	
6.ActionResult
	子类：
		ContentResult			返回一串字符串
		FileContentResult		返回文件的内容
		FilePathResult			返回路径文件的内容
		FileStreamResult		返回流文件的内容
		EmptyResult				返回空
		JavaScriptResult		返回一段 JavaScript 代码
		JsonResult				返回 JSON 格式的数据
		RedirectToResult		重定向到某个 URL
		HttpUnauthorizedResult	返回 403 未授权状态码
		RedirectToRouteResult	重定向到不同的控制器或方法
		ViewResult				从视图引擎中返回一个响应
		PartialViewResult		从视图引擎中返回一个响应
		
7.EntityFrameWork
	注册服务：
		