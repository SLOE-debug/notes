1.Startup类
	理论：Startup 类可以用来定义请求处理管道和配置应用程序需要的服务

	Startup 类包含以下两个方法：
		ConfigureServices：方法用于定义应用程序所需要的服务，例如 ASP.NET Core MVC 、 Entity Framework Core 和 Identity 等等
		
		Configure：用于定义请求管道中 中间件 的执行顺序
	
	不使用 Startup 类的情况下 配置 Configure
		Host.CreateDefaultBuilder(args)
			.ConfigureAppConfiguration((hostingContext, config) =>
            {
            })
			.ConfigureWebHostDefaults(webBuilder =>
            {
				webBuilder
				.ConfigureServices(services =>
                {})
				.Configure(app =>
                {})
			})
			
		多次使用 ConfigureServices 方法会依次追加 Services
		多次使用 Configure 方法会替代
		
	IStartupFilter：
		用途：想要在中间件管道开头或者结尾 配置中间件 并且无需显示调用 UseXXX 那么就用此方法扩展 Startup
		
		Startup过滤器 他就像是一个 抽离出来的 Configure 方法 可以通过他扩展 Startup
		// 声明 AppendHelloWorldStartupFilter
		public class RequestSetOptionsStartupFilter : IStartupFilter
			// 重写 Configure 方法
			public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
			// 该方法 传入了一个 Action<IApplicationBuilder> 也需要返回一个 Action<IApplicationBuilder> 咱们返回一个 lambda 表达式
				return builder => {
					builder.UseMiddleware<RequestSetOptionsMiddleware>();
					next(builder);
				}
		
		// 声明一个自定义中间件
		public class RequestSetOptionsMiddleware
			private readonly RequestDelegate _next;
			public RequestSetOptionsMiddleware(RequestDelegate next)	// 构造函数传入 next 委托 用于 next(HttpContext) 进入下一个中间件
			{
				_next = next;
			}
			// 实现 Invoke 方法 HttpContext 会通过该方法(或者是 InvokeAsync )进入自定义的中间件
			public async Task Invoke(HttpContext httpContext)
			{
				var option = httpContext.Request.Query["option"];
				if (!string.IsNullOrWhiteSpace(option))
				{
					httpContext.Items["option"] = option;
				}
				await _next(httpContext);
			}
		
		在 Program 类中
			Host.CreateDefaultBuilder(args)		想要在开始时注册的话 那么就在调用 CreateDefaultBuilder 方法后 就调用 ConfigureServices 注册扩展
			.XXX()
			.ConfigureServices(services =>
			{
				services.AddTransient<IStartupFilter, RequestSetOptionsStartupFilter>();
			})
	
	基于环境运行不同的 Configure 和 ConfigureServices
		Configure 和 ConfigureServices 支持 Configure<EnvironmentName> 和 Configure<EnvironmentName>Services
		launchSettings.json 配置：
			... 省略部分代码
			"environmentVariables": {
				"ASPNETCORE_ENVIRONMENT": "Test"
			}
		
        public void ConfigureTestServices(IServiceCollection services)
        {
            Console.WriteLine("Test:");
            services.AddControllers();
        }
		public void ConfigureTest(IApplicationBuilder app, IWebHostEnvironment env) { ... }
		
		public void ConfigureServices(IServiceCollection services) { ... }
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... }
	
2.依赖注入：
	在 ConfigureServices 中注册的服务 都可以在 Configure 中注入
		在 ConfigureServices 中注册：
			services.AddDbContext<TestNetCoreDbContext>(...);
			注： EFCore 一般生成周期都是以范围注册 可以设置重载 ServiceLifetime.Singleton 改为单例
			
		在 Configure 中注入：
			public void Configure(IApplicationBuilder app, IWebHostEnvironment env, TestNetCoreDbContext context)
			{
				context.XXXX();
			}

	也可以在 控制器 中注入
		接口文件(用于抽象依赖类)
			public interface IMyDependency
				void WriteMessage(string message);
		
		实现类
			public class MyDependency : IMyDependency
				public void WriteMessage(string message){ ... }
		
		在 ConfigureServices 中注册：
			services.AddScoped<IMyDependency, MyDependency>(); // 注册单个生存周期的服务
			
		控制器注入：
			public XXXController(ILogger<WeatherForecastController> logger, IMyDependency Dependency)
	
	服务注册多个实例时：
		services.AddScoped<IMyDependency, MyDependency>();
		services.AddScoped<IMyDependency, MyDependency2>();
		
		按照顺序后者实例会覆盖前者实例
		
		中间件构造函数解析
			public RequestSetOptionsMiddleware(RequestDelegate next, IMyDependency Dependency, IEnumerable<IMyDependency> Dependencies)
			前者单个的 IMyDependency 解析出来的实例时 MyDependency
			后者 IEnumerable<T> 解析出来的是所有依赖于 IMyDependency 注册的实例

	服务生存期：
		瞬态服务(Transient)：基于函数的服务 不同函数间使用的不是同一个服务
	
		范围服务(Scoped)：基于请求的服务 不同的请求使用的不是同一个服务
			要在中间件中使用范围内服务,将范围服务注入到 中间件的 Invoke 或 InvokeAsync 中,使用构造函数注入会引发异常,因为它强制使范围内服务的行为与单一实例类似
			注解：简单来说,就是方法才是基于范围的 而通过构造函数注入 那么将变成类中公用的 那么该范围服务想和单例没什么区别了
		
		单例服务(Singleton)：基于应用的服务 全应用使用一个服务
	
	脱离服务容器创建的服务：
		services.AddSingleton(new MyDependency());
		注：
			服务实例不是由服务容器创建的。
			框架不会自动释放服务。
			开发人员负责释放服务。
	
	服务注入行为：
		IServiceProvider：原本的DI容器,用于构造函数注入使用
		ActivatorUtilities：一个通过容器创建实例的帮助类,创建未在容器中注册的对象,与一些框架特性一起使用
			例：在 中间件 中使用
			Invoke方法：
				var Dependency = (IMyDependency)ActivatorUtilities.CreateInstance(httpContext.RequestServices, typeof(MyDependency));
				Dependency.WriteMessage();
				
			但我们通常不这样使用 在迫不得已的情况下 可以选择这种方法
			
		注：无论是使用哪种行为 要解析服务的类 都必须只能有一个 所有参数都可以通过DI容器注入实现的 构造函数
	
2.中间件
	中间件可以看成一个流水线 物品(Request) 进入中间件 在该中间件中可以判断是否可以进入下一个中间件 如果不可以进入 那么就将会退回去 当前物品(Request) 会变成另一个物品(Response) 按照来时的路线一次返回 反之 再次进入下一个中间件 进行以上操作
	
	框架中提供了尽可能简单的 单个请求委托 这种不包括管道的操作 调用单个匿名函数以响应每个 HTTP 请求 
	Run 委托不会收到 next 参数。 第一个 Run 委托始终为终端，用于终止管道。 Run 是一种约定 即短路中间件
		app.Run(async context =>
        {
            await context.Response.WriteAsync("Hello, World!");
        });
	
	使用 Use 将多个请求委托连接在一起
		app.Use(async (context, next) =>
        {
			// 进入下一个中间件前做的操作
            await next.Invoke();
			// 当 Response 回退到当前中间件时做的操作,HasStarted 是一个有用的提示，指示是否已发送标头或已写入正文
			// httpContext.Response.HasStarted 为true,切记不要对 Response 进行修改, 请考虑在进入下一个中间件前做修改
        });
	
		注：当委托不将请求传递给下一个委托时，它被称为“让请求管道短路”
	
	对中间件管道进行分支
		Map方式匹配到的 路径端 例：map1 map2 会从 HttpRequest.Path 删除 追加到 HttpRequest.PathBase
		
		如果请求路径以给定路径开头,则执行分支：
			HandleMapTest1(IApplicationBuilder app)
				 app.Run(委托...)
				 
			HandleMapTest2(IApplicationBuilder app)
				 app.Run(委托...)
				 
			Configure方法：
				app.Map("/map1", HandleMapTest1);
				app.Map("/map2", HandleMapTest2);
			
		Map 支持嵌套,例如：
			app.Map("/level1", level1App => {
				level1App.Map("/level2a", level2AApp => {
					// "/level1/level2a" processing
				});
				level1App.Map("/level2b", level2BApp => {
					// "/level1/level2b" processing
				});
			});
		
		Map 也还可以匹配多个路径段：app.Map("/map1/seg1",方法)
		
		MapWhen 支持按照条件来分支 app.MapWhen(context=>context.Request.Query["Name"] = "张三",方法)
		
		UseWhen 支持按条件来分支 但与 MapWhen 不同的是 他不发生短路并不能包含终端中间件 他需要再返回主管道中继续执行

3.主机
	Program=>Main 方法中调用的 CreateHostBuilder 方法
		如果有调用 ConfigureWebHostDefaults 方法那么会创建一个Http的工作负载 反之将会创建一个非Http的工作负载
		
		非Http工作负载：
		Host.CreateDefaultBuilder(args)
            .ConfigureServices((hostContext, services) =>
            {
               services.AddHostedService<Worker>();
            });
	
	框架提供的服务：
		这三个服务都是可以在 Startup 构造中注入的
		IHostApplicationLifetime：以前被称为 IApplicationLifetime,该接口用于通知应用程序生存期事件 
			提供以下属性：
				ApplicationStarted	// 应用程序开始时执行的事件
				ApplicationStopped	// 应用程序结束中执行的事件
				ApplicationStopping	// 应用程序结束后执行的事件
			
			咱们可以选择在 Configure 中注入 IHostApplicationLifetime 服务 配置应用程序的生命周期事件
			Configure(..., IHostApplicationLifetime lifetime){
				// 其他事件同理
				lifetime.ApplicationStarted.Register(() =>
				{
					Console.WriteLine("程序已运行");
				});
			}
			
		IHostLifetime：实现控制主机何时启动和停止
			
		IHostEnvironment：用于获取环境信息 ApplicationName EnvironmentName ContentRootPath
	
	适用于 Web 应用的主机配置：https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0#settings-for-web-apps
		关于 承载服务、主机启动、错误详情页、HTTPS、URL、WebRoot 配置
	
	在 CreateWebHostBuilder 方法下使用 命令行Config
		var config = new ConfigurationBuilder()
			.XXX()
            .AddCommandLine(args)
            .Build();
		return Host.CreateDefaultBuilder(args)
			.ConfigureWebHostDefaults(webBuilder =>
			{
				webBuilder.UseUrls(config["MyUrl"]);
			})
	
	使用非组织方式运行 WebHost 主机
		using (var host = WebHost.Start("http://localhost:8080",router => router
			.MapGet("hello/{name}", (req, res, data) => 
				res.WriteAsync($"Hello, {data.Values["name"]}!"))
			.MapGet("buenosdias/{name}", (req, res, data) => 
				res.WriteAsync($"Buenos dias, {data.Values["name"]}!"))
			.MapGet("throw/{message?}", (req, res, data) => 
				throw new Exception((string)data.Values["message"] ?? "Uh oh!"))
			.MapGet("{greeting}/{name}", (req, res, data) => 
				res.WriteAsync($"{data.Values["greeting"]}, {data.Values["name"]}!"))
			.MapGet("", (req, res, data) => res.WriteAsync("Hello, World!"))))
		{
			Console.WriteLine("Use Ctrl-C to shutdown the host...");
			host.WaitForShutdown();
		}

4.配置
	使用选项模式绑定分层配置数据
		实体类：
			public class Test
			{
				public readonly string ConfigName = "Test";
				public string UserName { get; set; }
				public string UserPass { get; set; }
			}
		同样也可以绑定数组结构
		
		绑定方式：
			第一种：
				Configuration.GetSection(TestConfig.ConfigName).Bind(TestConfig);
				Console.WriteLine(TestConfig.UserName);
				Console.WriteLine(TestConfig.UserPass);
			
			第二种：
				var TestConfig = Configuration.GetSection("Test").Get<Test>();
				...
		
		appsettings.json
			"Test": {
				"UserName": "zs",
				"UserPass": "123"
			}
		
	将选项注入到DI中
		services.Configure<Test>(Configuration.GetSection("Test"));
		
		服务解析：
			public XXXController(IOptions<Test> options)
			{
				_options = options.Value; // Value 是 Test实例
			}

	命令行参数的交换映射(可以理解是缩写键)
		交换键必须使用 - 或 -- 开头
		交换映射字典不得包含重复键值
		
		交换映射字典：
			var switchMappings = new Dictionary<string, string>()
			{
				{ "-s", "setingName" },
				{ "-u", "UserName" },
				{ "--p", "PassWord" },
			};
			
		主机构建时：
			Host.XXX().ConfigureAppConfiguration((hostingContext, config) =>
            {
                config.AddCommandLine(args, switchMappings);
            })
	
	Key-per-file配置提供程序：
		使用目录的文件作为配置键值对,该键是文件名,该值包含文件的内容
		
		Host主机构建时：
		Host.XXX().ConfigureAppConfiguration((hostingContext, config) =>
		{
			var path = Path.Combine(
				Directory.GetCurrentDirectory(), "path/to/files");
			config.AddKeyPerFile(directoryPath: path, optional: true);
		})
		
		取值时：Configuration[文件名] 例：文件名为 Logging__LogLevel__System 时 那么键为 Logging:LogLevel:System
	
	基于内存集合配置键值对
		var Dict = new Dictionary<string, string>
        {
           {"MyKey", "Dictionary MyKey Value"},
           {"Position:Title", "Dictionary_Title"},
           {"Position:Name", "Dictionary_Name" },
           {"Logging:LogLevel:Default", "Warning"}
        };
		Host.XXX()
		.ConfigureAppConfiguration((hostingContext, config) =>
		{
			config.AddInMemoryCollection(Dict);
		})

	关于配置文件的值转换问题：Configuration.GetValue<int>("NumberKey", 99); // 如果配置文件 找不到NumberKey 那么将使用99为默认值返回

	GetSection、GetChildren 和 Exists
		GetSection 会返回具有指定子节键的配置子节 
			var config = Configuration.GetSection("Test");
			Console.WriteLine(config["UserName"]);
			Console.WriteLine(config["UserPass"]);
		
		GetChildren 会返回指定键的所有子节点
			var config = Configuration.GetSection("Test").GetChildren();
			foreach (var subSection in children)
		
		Exists 判断取到的值存不存在
			Config.GetSection("section2").Exists();
	
	基于 EF 数据库的配置
		// 设置配置项源
		class EFConfigurationSource : IConfigurationSource
			readonly Action<DbContextOptionsBuilder> OptionsAction;
			// 通过构造函数传递一个委托进来 用来设置 DbContext 的 Options
			EFConfigurationSource(Action<DbContextOptionsBuilder> _OptionsAction)
				OptionsAction = _OptionsAction;
			// 必须实现的接口方法
			IConfigurationProvider Build(IConfigurationBuilder builder)
				return new EFConfigurationProvider(OptionsAction);
		
		// 设置配置项提供者
		class EFConfigurationProvider : ConfigurationProvider
			readonly Action<DbContextOptionsBuilder> OptionsAction;
			// 同配置项源一样
			EFConfigurationProvider(Action<DbContextOptionsBuilder> _OptionsAction)
				OptionsAction = _OptionsAction;
			// 重写 提供者 加载方法
			override void Load()
				// 初始化一个 TestNetCoreDbContext 类型的 DbContextOptions 器
				var EfConfigbuilder = new DbContextOptionsBuilder<TestNetCoreDbContext>();
				// 然后执行 委托传入 数据库上下文选项(DbContextOptions)
				OptionsAction(EfConfigbuilder);
				// 此时执行完委托 EfConfigbuilder.Options 就是应用 SqlServer 数据库了 可以直接传入 TestNetCoreDbContext 构造函数中 db 实例将会是链接 指定的数据库的 数据库上下文
				using (var db = new TestNetCoreDbContext(EfConfigbuilder.Options))
				{
					db.Database.Migrate();
					Data = db.AppConfigs.ToDictionary(c => c.Key, c => c.Value);	// Data 为 父级 ConfigurationProvider 的属性 直接赋值即可
				}
		
		// 配置 Host 主机 ConfigureAppConfiguration 方法 让其加载自定义配置项
			Host.XXX()
				.ConfigureAppConfiguration((configBuilder) =>
                {
                    var config = configBuilder.Build();
					// 初始化 EF 配置项源 并传入委托 设置其应用 SqlServer 数据库
                    configBuilder.Add(new EFConfigurationSource(option =>		
                    {
                        option.UseSqlServer(config["Data:DefaultConnection:ConnectionString"]);
                    }));
                })
	
	Razor Pages 中访问配置：
		非绑定实体类模式：
			@using Microsoft.Extensions.Configuration
			@inject IConfiguration Configuration
			
			Configuration value for 'MyKey': @Configuration["MyKey"]
		
		绑定实体类模式：
			@using Microsoft.Extensions.Options
			@inject IOptions<Test> options
			
			<p><b>UserName:</b> @options.Value.UserName</p>
			<p><b>UserPass:</b> @options.Value.UserPass</p>

5.选项
	IOptions<TOptions>：
		注测为单一实例且可以注入到任何服务生存周期
		应用启动后无法重载配置
		无法实现热加载
	
	IOptionsSnapshot<TOptions>：
		注册为范围实例，因此无法注入到单一实例服务
		应用启动后可重载配置
		可实现热加载
		可支持命名选项
	
	IOptionsMonitor<TOptions>：
		注册为单一实例且可以注入到任何服务生存期
		可重载配置
		更改通知(即文件或Option被更改时触发的方法)
		可以让某个选项失效
	
	IOptionsMonitor 和 IOptionsSnapshot 之间的区别：
		IOptionsMonitor 是一种单一示例服务，可随时检索当前选项值
		IOptionsSnapshot 是一种作用域服务 只在服务解析时才能获取配置值 具有短暂性和作用域的依赖性
	
	当多个配置节点绑定到同一属性时：
		// Json文件：
		"TopItem": {
			"Month": {
			  "Name": "Green Widget",
			  "Model": "GW46"
			},
			"Year": {
			  "Name": "Orange Gadget",
			  "Model": "OG35"
			}
		  }
	
		// 实体类
		class TopItemSettings
			const string Month = "Month"
			const string Year = "Year"
			prop string Name
			prop string Model
		
		// DI 注入选项
		services.Configure<TopItemSettings>(TopItemSettings.Month, Configuration.GetSection("TopItem:Month"));
		services.Configure<TopItemSettings>(TopItemSettings.Year, Configuration.GetSection("TopItem:Year"));
		
		构造函数解析：
			XXXController(IOptionsSnapshot<TopItemSettings> namedOptionsAccessor)	// 只有 IOptionsSnapshot 和 IOptionsMonitor 支持 Get 方法 普通的就别想了
				Console.WriteLine(namedOptionsAccessor.Get(TopItemSettings.Year).Name);

	使用 DI 服务配置选项
		services.AddOptions<Test>("TestName").Configure<Service1,Service2,Service3,Service4,Service5>(	// Configure方法支持最多五个服务来配置选项
			(t,s1,s2,s3,s4,s5)=>{
				t.UserName = GetName(s1,s2,s3,s4,s5)  // 假设有 GetName 方法用来获取这五个服务的类名拼接在一起
			}
		)
		
		构造函数解析：
			XXXController(IOptionsSnapshot<Test> test) // 如果 AddOptions 时没有传递 name 参数 那么可以直接用 IOptions<Test> 来解析
				Console.WriteLine(test.Get("TestName").UserName);

	选项验证：
		// 调用 ValidateDataAnnotations 方法进行验证
		services.AddOptions<Test>().Bind/Configure().ValidateDataAnnotations();
		
		// 实体类
		public class Test
		{
			public readonly string ConfigName = "Test";
			public string UserName { get; set; }
			public string UserPass { get; set; }
			// 采用 DataAnnotations 命名空间下的类来做验证 ValidateDataAnnotations 方法只支持此命名空间的验证类
			// 该验证表示 Age 不能大于9 并且 不能小于0
			[Range(0, 9, ErrorMessage = "Value for {0} must be between {1} and {2}.")]
			public int Age { get; set; }
		}
		
		当试图去取相应的值的时候会触发验证
			test.Get("TestName").XXX
		
		使用委托应用更复杂的验证规则：
			services.AddOptions<Test>().Bind/Configure().Validate(config=>{
				return true|false;
			},"Error Info")
	
	通过实现接口 IValidateOptions<TOptions> 来实现更复杂的验证：
		class MyConfigValidation : IValidateOptions<Test>
			MyConfigOptions _config;
			// 构造函数
			MyConfigValidation(IConfiguration config)
				_config = config.GetSection("Test").Get<Test>();
			
			ValidateOptionsResult Validate(string name, MyConfigOptions options)
				return ValidateOptionsResult.Success; | return ValidateOptionsResult.Fail("Error Info");
		
		services.TryAddEnumerable(ServiceDescriptor.Singleton<IValidateOptions
                              <Test>, MyConfigValidation>());
	
	在 Configure 后进行 后期配置：
		services.PostConfigure<Test>(t =>
		{
			t.UserName = "zs";
		});
	
	同样 AddOptions 的选项也可以在 Startup.Configure 中注入
	
6.安全
	软件常见漏洞：
		跨站点脚本(XXS)攻击：该方式为直接在表单中输入 Script 的链接以在网页中添加脚本的方式 或 URL 或 HTML标签中
			解决方案：避免将不守信的数据动态加载成 HTML 节点 如果非要加载 那么全部将其编码 常见的编码器有 HtmlEncoder、 JavaScriptEncoder 和 UrlEncoder
		打开重定向攻击：在需要单点登录的站点中,都会用到 returnUrl 而在传输 returnUrl 途中 被恶意应用替换成了其他的 Url 然后用户登录完跳转到恶意应用,再从恶意应用跳转到原应用 完成对用户令牌的窃取
			解决方案：验证返回的 returnUrl 是不是本站点的 Url 如果不是,直接作废
	
7.gRPC
	优点：
		现代高性能轻量级 RPC 框架。
		协定优先 API 开发，默认使用协议缓冲区，允许与语言无关的实现。
		可用于多种语言的工具，以生成强类型服务器和客户端。
		支持客户端、服务器和双向流式处理调用。
		使用 Protobuf 二进制序列化减少对网络的使用。
	
	适用于：
		效率至关重要的轻量级微服务。
		需要多种语言用于开发的 Polyglot 系统。
		需要处理流式处理请求或响应的点对点实时服务。
		
	gRPC 使用协定优先方法进行 API 开发
	
	*.proto文件：
		文件内容包含：
			gRPC 服务的定义。
			在客户端与服务器之间发送的消息。
		
		proto 语言指南：
			proto2语法的：https://developers.google.cn/protocol-buffers/docs/proto
			proto3语法的：https://developers.google.cn/protocol-buffers/docs/proto3
			C# *.proto文件的语法：https://docs.microsoft.com/zh-cn/aspnet/core/grpc/protobuf?view=aspnetcore-5.0#scalar-value-types
		
		解析文件内容(文件名：greet.proto)：
			syntax = "proto3";	--Protobuf 语法
			
			option csharp_namespace = "GrpcGreeter";	-- 服务命名空间 需 using GrpcGreeter 才可使用 Greeter 服务
			
			package greet;	-- 所属的包 在其他 *.proto文件中导入时使用
			
			import "google/protobuf/wrappers.proto";	-- 导入 谷歌的 wrappers.proto 包
			
			service Greeter { -- 定义服务 其中包含 gRPC 的四种方法类型 生成的抽象类将为 Greeter.GreeterBase
			  // 一次性的
			  rpc SayHello (HelloRequest) returns (HelloReply);

			  // 服务器流式响应
			  rpc StreamingFromServer (ExampleRequest) returns (stream ExampleResponse);

			  // 客户端流式请求
			  rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);

			  // 双向的 流式响应及请求
			  rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
			}
			
			定义消息,定义消息的概念类似于定义一个 .Net 类
			每个字段都有一个唯一的数字编号 而不是默认值 因为序列化一个编号要比序列化一个字段名要快得多
			命名字段名时 xxx_xxx 会被生成为 Xxx_Xxx
			message ExampleRequest {
				int32 pageIndex = 1;	-- 数字类型的 pageIndex 字段
				int32 pageSize = 2;		-- 同上
				bool isDescending = 3;	-- 布尔类型的 isDescending 字段
				google.protobuf.Int32Value age = 4; -- 从 wrappers 包中引入的 可为空的数字类型
				string frist_name = 5;	--字符串类型的 frist_name 字段
			}
			
			以上消息会生成 差不多这样的 Net 类
			public class ExampleRequest{
				prop int PageIndex
				prop int PageSize
				prop int IsDescending
				prop int? Age
				prop string FristName
			}
	
	服务端：
		通过引入 NuGet Grpc.Tools 包及将 *.proto 文件添加到 <Protobuf> 项目组
			<ItemGroup>
			  <Protobuf Include="Protos\greet.proto"  GrpcServices="Server" />	--GrpcServices项：*.proto 文件在服务端就写 Server 在客户端就写 Client
			</ItemGroup>
		
		右键项目生成 将自动生成用于服务、客户端和消息的 .NET 类型
		
		比如 greet.proto 文件 将会生成一个 叫做 Greeter.GreeterBase 的抽象类
			abstract partial class GreeterBase
				SayHello
				...等 proto文件中 定义的方法
				
			但该抽象类的所有方法都会抛出一个 RpcException 的异常
			
			我们需要写一个 类来 重写它这些抛异常的方法
			class GreeterService : Greeter.GreeterBase
				SayHello
					return Task.FromResult(new HelloReply{});
		
		至此服务端重写方法后,在 Startup 类中的 ConfigureServices 方法里注册 Grpc 服务并配置 MapGrpcService 后 服务端可正常启动
			ConfigureServices
				services.AddGrpc();
			
			Configure
				endpoints.MapGrpcService<GreeterService>();
		
	客户端：
		将 *.proto 文件放在 Protos 文件夹下
		跟服务端一样 引入 Grpc.Tools 包 将 *.proto 文件添加到 <Protibuf> 项目组	GrpcServices 需要变成 Client
		
		右键项目生成
		
		引入一下包：
			Google.Protobuf
			Grpc.Net.Client
			Grpc.Tools
		
		using var channel = GrpcChannel.ForAddress("https://localhost:5001");	--通过一个长连接地址生成管道
		var client = new Greeter.GreeterClient(channel);	-- 通过管道新建 Greeter 客户端
		await client.SayHelloAsync(new HelloRequest { Name = "张三" })	-- 调用服务方法
		
	服务端流式响应：
		服务端：
			StreamingFromServer 方法：
				for (int i = 0; i < 5; i++)
				{
					await responseStream.WriteAsync(new ExampleResponse { });	-- 返回数据
					await Task.Delay(TimeSpan.FromSeconds(1));	-- 等待一秒
				}
				
				有时候设计出来的服务端的流式响应是永久的 需要客户端依赖项来停止 比如
				while (!context.CancellationToken.IsCancellationRequested)
				{
					await ...
				}
		
		客户端：
			var stream = client.StreamingFromServer(new ExampleRequest { PageSize = 10, PageIndex = 2 });
			var source = new CancellationTokenSource();
			
			我们传入一个 Token 当 i 大于等于 2 时 设置该 Token 为取消状态 停止服务端继续返回流式响应
			当 Token 为取消状态时 MoveNext 方法会抛出异常 最好使用一个 try Catch 来捕获并处理异常
			
			while (await stream.ResponseStream.MoveNext(new CancellationToken(source.Token)))
			{
				if (i >= 2) source.Cancel();
				Console.WriteLine("结果：" + stream.ResponseStream.Current.MessageRes);
				i++;
			}
	
	客户端流式请求：
		服务端：
			StreamingFromClient 方法：
				while (await requestStream.MoveNext())	-- 客户端没有通知说发送完毕,将一直止步于此获取消息
				{
					Console.WriteLine(requestStream.Current.Age);
				}
				return new ExampleResponse { MessageRes = "成功！" };
		
		客户端：
			using var callServer = client.StreamingFromClient();	-- 获得用于请求的 AsyncClientStreamingCall 对象
            int age = 0;
            var random = new Random();
            while (age < 30)
            {
                age = random.Next(1, 50);
                await callServer.RequestStream.WriteAsync(new ExampleRequest { Age = age });	-- 使用 callServer 中的请求流发送请求
            }
            await callServer.RequestStream.CompleteAsync();	-- 发送完毕时 通知服务端停止接受数据并返回结果
            var res = await callServer;	-- 等待当前 AsyncClientStreamingCall 对象返回结果
            Console.WriteLine(res.MessageRes);
		
	双向流：
		服务端：
			StreamingBothWays 方法：
				await foreach (var message in requestStream.ReadAllAsync())	-- 接收消息 输出消息内容 并 返回消息
				{
					Console.WriteLine(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "：" + message.Age);
					await responseStream.WriteAsync(new ExampleResponse { MessageRes = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "：成功！" });
				}
				
				// 同时读取和发送消息
				var readTask = Task.Run(async () =>	-- 创建一个线程来获取客户端发来的请求
				{
					await foreach (var message in requestStream.ReadAllAsync())		-- 接收消息并输出消息内容
					{
						Console.WriteLine(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "：" + message.Age);
					}
				});
				while (!readTask.IsCompleted)	-- 如果一直在接收消息 那就一直返回消息
				{
					await responseStream.WriteAsync(new ExampleResponse { MessageRes = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "：成功！" });
					await Task.Delay(1, context.CancellationToken);	-- 暂停一秒
				}
		
		客户端：
			using var call = client.StreamingBothWays();
            var readTask = Task.Run(async () =>	-- 创建一个异步线程来读取服务端返回回来的响应
            {
                await foreach (var message in call.ResponseStream.ReadAllAsync())		-- 从流读取器中读取所有的数据
                {
                    Console.WriteLine(message.MessageRes);
                }
            });
			
			int age = 0;
            var random = new Random();
            while (age < 30)
            {
                age = random.Next(1, 50);
                await call.RequestStream.WriteAsync(new ExampleRequest { Age = age });	-- 发送请求
            }
            await call.RequestStream.CompleteAsync();
            await readTask;	-- 等待服务端的所有数据全部读取完毕
	
	访问 请求/响应 标头
		服务端：context.RequestHeaders.GetValue("user-agent");
		客户端：(await call.ResponseHeadersAsync).GetValue("xxx");
	
	访问 gRPC 尾部
		通过 GetTrailers() 方法来访问
		
		一次性的/客户端流式调用必须等待 ResponseAsync 才能调用 GetTrailers 方法
			using var call = client.SayHelloAsync(new HelloRequest { Name = "张三" })
			var response = await call.ResponseAsync;
			var trailers = call.GetTrailers();
		
		服务器和双向流式调用必须等到出现响应流 才能调用 GetTrailers 方法
			await foreach (var response in call.ResponseStream.ReadAllAsync())
			{
			
			}
			var trailers = call.GetTrailers();
		
		通过 try catch 来捕获 RpcException 异常 也可以获取到 gRPC 尾部
			try{
			
			}catch(RpcException ex){
				Console.WriteLine(ex.Trailers)
			}
	
	传递截止时间：
		通过在调用的 服务方法 中传递 deadline 参数 来指定该方法的调用时间
		如果超出了调用时间 那么客户端将立即中止基础的 HTTP 请求并引发 DeadlineExceeded 错误
		服务端 将中止正在执行的 HTTP 请求，并引发 ServerCallContext.CancellationToken 尽管终止了 HTTP 请求 但是方法还是继续执行的 直到方法执行成功,应当将取消令牌一起传递给异步方法 使其随调用一同被取消
		
		取消客户端调用有两种方式 取消令牌 和 调用 call.Dispose 这两者都会引发异常
	
	gRPC 客户端工厂集成(即在MVC/Web Api中使用 gRPC)：
		Startup
			ConfigureServices
				services.AddGrpcClient<Test.TestClient>(o =>
				{
					o.Address = new Uri("https://localhost:5001");
				})
				.ConfigurePrimaryHttpMessageHandler(() =>		// 配置处理程序
				{
					return new HttpClientHandler { UseCookies = false };
				})
				.AddInterceptor(() => new LoggingInterceptor())	// 配置侦听器
				.ConfigureChannel(o =>							// 配置管道
				{
					o.Credentials = new CustomCredentials();
				})
				.EnableCallContextPropagation(					// 配置自动将截止时间和取消令牌传播到子调用
					o => o.SuppressContextNotFoundErrors = true;// 如果想在调用上下文之外使用客户端 将此项配置为 true 否则将会提示你没有要传播的调用上下文
				);
		
		构造函数解析 并 使用
			XXX(Test.TestClient client)
				client.SayHello(new HelloReq {})
		
	配置 gRPC 重试策略
		var defaultMethodConfig = new MethodConfig // 新建方法配置
		{
			Names = { MethodName.Default },		// 此处使用方法名,指定哪些方法使用该策略,Default 为全部的方法
			RetryPolicy = new RetryPolicy		// 新建策略
			{
				MaxAttempts = 5,	// 重试次数
				InitialBackoff = TimeSpan.FromSeconds(1),	// 延迟多长时间重试,每次失败该值将乘以 BackoffMultiplier 以增加延迟时间
				MaxBackoff = TimeSpan.FromSeconds(5),		// 延迟最长时间
				BackoffMultiplier = 1.5,					// 被乘指数
				RetryableStatusCodes = { StatusCode.Unavailable } // 请求状态码为指定项将重试
			}
		};
		
		当出现以下两种情况时 gRPC 将提交
			客户端收到响应头
			客户端传出消息 或 当客户端为流式处理时传出消息超出客户端最大缓冲区大小 视为已传出消息

		当出现以下两种情况时 gRPC 将不会重试
			服务器流式处理、双向流式处理,在已收到第一个消息后
			客户端流式处理、双向流式处理,传出消息超出客户端的最大缓冲区大小时

	例子：
		.proto：
			gRPC 使用协定优先方法进行 API 开发
			在 *.proto 文件中定义服务和消息
			*.proto 包含：
				gRPC 服务的定义。
				在客户端与服务器之间发送的消息。
			
			syntax = "proto3";
			
			import "google/protobuf/wrappers.proto";
			
			service Greeter {
			  rpc SayHello (HelloRequest) returns (HelloReply);
			  rpc StreamingFromServer (ExampleRequest) returns (stream ExampleResponse);		-- 指定 返回的响应为流式响应
			}
			
			message HelloRequest {	-- 每个 message 定义的 Protobuf 消息都是用于传输的消息对象 而定义该对象的概念类似于定义一个 .Net 类
			  string name = 1;			-- 字符串类型的 name
			  int32 id = 2;				-- 数字类型的 id
			  string first_name = 3; 	-- 字符串类型的 FirstName 因为按照这种(xxx_xxx)的约定来定义的话 那么最终会生成 Xxx_Xxx 的样子
			  google.protobuf.Int32Value age = 5;	--可为空的数字类型的 age 但需要先导入 wrappers.proto 到 .proto
			  ... 每个字段都有一个唯一的编号 因为序列化一个编号要比序列化一个字段名要快得多
			  ... 更多的字段类型请参照：
			}

			message HelloReply {
			  string message = 1;
			}
		
			通过在项目中包含 *.proto 文件，可以自动生成用于服务、客户端和消息的 .NET 类型
				添加 Grpc.Tools 包
				将 *.proto 文件添加到 <Protobuf> 项目组
					<ItemGroup>
					  <Protobuf Include="Protos\greet.proto" GrpcServices="Client" />	-- GrpcServices 的有效选项 Both（如果不存在，则为该默认值）Server(表示服务端的 proto) Client(表示客户端的 proto) None(表示为空)
					</ItemGroup>
					
				接下来交给 Grpc.Tools 自动生成
		
		服务端：
			服务端会根据 proto 生成 GreeterBase 抽象类 SayHello 方法默认是一个返回异常的接口 所以要搞一个类来继承他 
			public class GreeterService : Greeter.GreeterBase
				override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)		--重写该方法
				override async Task StreamingFromServer(ExampleRequest request, IServerStreamWriter<ExampleResponse> responseStream, ServerCallContext context)	--重写服务端流式响应方法
			
			Startup类：
				app.UseEndpoints(endpoints =>
				{
					endpoints.MapGrpcService<GreeterService>();
				})
		
		客户端：
			创建一个放 *.proto 文件的文件夹 我这里创建 Protos
			右键项目编辑项目文件 将 *.proto 文件添加进去
				<ItemGroup>
					<Protobuf Include="Protos\greet.proto" GrpcServices="Client" />	--GrpcServices 相关的有效值请参考以上所述
				</ItemGroup>
			添加一下包：
				Google.Protobuf
				Grpc.Net.Client
				Grpc.Tools
			
			生成项目即可直接调用 Greeter
				channel = GrpcChannel.ForAddress("https://localhost:5001"); -- 去连接一个长链接地址
				client = new Greeter.GreeterClient(channel)	-- 通过通道获取客户端实例
				var stream = client.StreamingFromServer(new ExampleRequest { PageSize = 10, PageIndex = 2 });	--咱们在这拿服务端流式响应来测试
				IsContione = true;
				i = 1;
				try{
					while(await stream.ResponseStream.MoveNext(new CancellationToken(!IsContione))){
						if (i >= 2) IsContione = false;
						Console.WriteLine("结果：" + stream.ResponseStream.Current.MessageRes);
						i++;
					}
				}catch{
				
				}
				
				
			
3.静态文件
	wwwroot：如果没有额外的配置,那么该文件夹将是应用程序中唯一可以存放静态文件的位置
	
	默认页面：
		非开发模式：IIS默认文件列表设置
	
		开发模式：
			采用中间件 UseDefaultFiles
			如果是MVC开发：
				用 UseMvcWithDefaultRoute 或者 UseMvc
	
4.MVC的开发
	理论：Net Core 2.1里面集成了MVC的程序集只需要注册相应的中间件和服务即可
	
	将项目改为MVC开发步骤：
		1.创建Controller文件夹
		2.创建HomeController控制器
		3.添加index方法
		4.注册中间件 UseMvcWithDefaultRoute
		5.注册MVC服务 services.AddMvc()
	
		运行即可看到页面...
	
	重要文件说明：
		查看NetCore源码：
			Git方式：F12定位方法查看类名,然后复制类名去微软官方的git仓库查找这个文件,然后再复制方法名到文件中搜索
			VS2019：工具-->选项-->代码编辑器-->C#-->高级
		Program.cs：
			基于WebHost的Net Core启动原理：
				CreateDefaultBuilder
					Startup类中 Configure 方法参数app和env的注入来源：在 WebHost.CreateDefaultBuilder 方法内,实例化了 WebHostBuild 类,在该类中注入了 serviceCollection.AddTransient<IApplicationBuilder> 工厂
					当实例化 WebHostBuild 类后
					调用 UseContentRoot：设置静态资源和动态资源的目录(要去哪里寻找视图、js、css、img文件)
					调用 UseConfiguration：该方法是获取命令行运行时的参数,带入到 Startup 类中
					调用 UseKestrel：该方法是在程序内部运行 Kestrel 作为自身的 HttpServer 来处理 HTTP 请求
					调用 ConfigureAppConfiguration：获取 appsettings.json 配置信息
						 上级调用 AddUserSecrets：如果这是一个开源项目,每个人拷贝下来,都有每个人的服务器、SSO、或者私钥的配置,那么就可以通过右键项目-->管理用户机密来设置这些信息,当然,这些信息并不会上传到git仓库
						 上级调用 AddEnvironmentVariables：环境变量
					调用 ConfigureLogging：该方法是日志,添加了配置文件中的服务日志、控制台、DeBug、事件日志
					调用 ConfigureServices：该方法进行 Startup 类中同名方法进行服务处理并配置一下方法内的默认配置,即服务注入
				
				UseStartup<Startup>()：在此方法中注入服务、中间件
				
				Run：当启动之后,会阻塞调用线程直到程序关闭,控制台中的提示消息也是在该方法中提示的
				
		Startup.cs：
			配合program做一些独立配置的一些文件
		
		进程内和进程外：
			在此的进程指的是 IIS Express Worker Process
			进程内：Net Core 进程内(inProcess)托管,进程内托管可依靠 IIS 获得更高的吞吐量
			进程外：Net Core 进程外(out of Process)托管,使用内部的 kestrel
			
			在Core项目的 csproj 文件中 会有一个叫做 AspNetCoreHostingModel 的节点,值有 InProcess 和 OutOfProcess 两种选择,当值为 OutOfProcess 时,如果还是以IIS启动的话,因为 kestrel 是要配合一个反向代理服务器使用的,那么此时IIS会变成反向代理服务器的形式运行,验证IIS时反向代理服务器还是应用服务器,在客户端(也就是浏览器)查看NetWork请求,在 Response 的请求中会有一个 Server：kestrel 表示当前应用服务器是 kestrel
			
			进程内托管问题：在本地可以完美运行,但发布到IIS就无法运行了,大多是路径问题,因为进程外托管的话,整个目录是在dotnet执行时确定的,进程内的话,因为w3we.exe文件在C盘,所以容易出现路径不对的问题,所以尽量使用进程外运行
		
	JWT鉴权：
		我们来看一下JWT的流程：
			服务端颁发 ToKen -->客户端访问API携带 ToKen 也就是在Header中携带键为 Authorization 值为 Bearer ToKen值-->服务端效验
			上面流程的在 Net Framework MVC 中,需要一个过滤器并在方法或者控制器上方打上自定义特性标记([JWTattr])来效验JWT,而在 Net Core 中,是以中间件的方式来的,请参考以下代码
			颁发 Token：
														  此处的方法是将 JwtSecurityToken 对象来输出成一个ToKen
				var token = new JwtSecurityTokenHandler().WriteToken(new JwtSecurityToken(		--JwtSecurityToken 对象是用来配置 声明(Payload)、颁发者(issuer)、订阅者(audience)、有效时间(expires)、数字签名[也就是对JWT的算法(signingCredentials)]
					claims: new Claim[] {	--在这里 Claim 的类型有两种、ClaimTypes(微软内置的 Payload 字段名)、JwtRegisteredClaimNames(JWT内置封装的 Payload 字段名)
						new Claim(ClaimTypes.Name,"balabala"),
						new Claim(JwtRegisteredClaimNames.Email,"balabala@qq.com"),
						new Claim(JwtRegisteredClaimNames.Sid,"1001"),
						new Claim(ClaimTypes.Role,"Staff")
					},
					issuer: "taba",
					audience: "er",
					expires: DateTime.Now.AddDays(1),
					signingCredentials: new SigningCredentials(new SymmetricSecurityKey(Encoding.UTF8.GetBytes("balabalabalabala")), SecurityAlgorithms.HmacSha256)));
			
			效验 ToKen：
				在这里效验 ToKen 变成了中间件的方式(在方法或者控制器上打 Net Core 内置特性 [Authorize],该方式是无状态的,即无论什么角色都可以访问,另一种 [Authorize(Roles="Admin") 代表只有 Admin 角色才可以使用]),效验JWT时 颁发者、订阅者、数字签名、必须一样才能通过验证
				注册服务：
					services.AddAuthentication("Bearer")		--开启 Bearer 验证
						.AddJwtBearer(b =>		--注册JWT服务
						b.TokenValidationParameters = new TokenValidationParameters()	--参数效验配置,一般像这些配置信息都会写在配置文件中以方便配置
						{
							ValidateIssuerSigningKey = true,	--是否开启对数字签名的效验
							ValidateIssuer = true,				--是否开启对颁发者的效验
							ValidateAudience = true,			--是否开启对订阅者的效验
							ValidIssuer = "taba",				--配置颁发者信息
							ValidAudience = "er",				--配置订阅者信息
							IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("balabalabalabala"))		--配置数字签名的信息
						});
						
				开启中间件：app.UseAuthentication();
			
			在API中获取 Token值的方法：User.FindFirst(d => d.Type == ClaimTypes.Name).Value,其原理是 客户端请求会携带 Bearer ,Net Core 会将 HttpContext 中获取到的 Bearer 解析,并放入 User.Claims 属性中
			
			注意事项：因为 JWT 和 Net Core 内置的 Claim 字段名会有冲突,Net Core 中 Claim配置映射 会将 JWT 中的 Payload 的字段名替换掉,在注册 JWT 服务之前加上这么一行代码 JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear() 取消 Net Core 的映射
			
		依赖注入：
			IOC控制反转：该名词指的是一种思想
			DI依赖注入：该名词指的是实现IOC的一种设计方法
			
			三种注入方法：
				构造函数注入
				属性注入
				方法注入
				
			三种生命周期注册注意要保持一致
				AddTransient：每次注入都会创建一个转瞬即逝的服务
				AddScoped：是按范围创建的,在Web应用程序中,每个请求都会创建一个独立的服务范围
				AddSingleton：应用级别的单例服务,这通常意味着它们在每个应用程序只创建一次,然后用于整个应用程序生命周期
			
			依赖注入的好处：
				只修改配置文件,不重启服务器
				减少代码量：在类中需要实例的对象封装成属性,注入进来
				防止重构：添加或者修改功能只需要修改配置
				忽略内部复杂依赖：不用再去管更深层次的依赖
				管理生命周期：防止内存泄露
				单元测试：Mock
				方便代理：配合AOP
				
5.属性路由
	[Route("[controller]")]
    public class AboutController
    {
        public AboutController()
        {
        }

        [Route("")]				--此处留空的话那么当前Action为默认页面
        public string Phone()
        {
            return "+10086"; 
        }  

        [Route("[action]")]
        public string Country()
        {
            return "mlbz"; 
        }
    }
	
6.ActionResult
	子类：
		ContentResult			返回一串字符串
		FileContentResult		返回文件的内容
		FilePathResult			返回路径文件的内容
		FileStreamResult		返回流文件的内容
		EmptyResult				返回空
		JavaScriptResult		返回一段 JavaScript 代码
		JsonResult				返回 JSON 格式的数据
		RedirectToResult		重定向到某个 URL
		HttpUnauthorizedResult	返回 403 未授权状态码
		RedirectToRouteResult	重定向到不同的控制器或方法
		ViewResult				从视图引擎中返回一个响应
		PartialViewResult		从视图引擎中返回一个响应
		
7.EntityFrameWork
	注册服务：
		