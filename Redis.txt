1.Redis.conf
	daemonize no	--Redis默认不是以守护进程的方式运行,可以通过该配置项修改,使用yes启动守护进程(守护进程即当终端退出也还会继续运行的进程)
	
	pidfile /var/run/readis.pid		--当Redis以守护进程方式运行时,Redis默认会把pid写入/var/run/readis.pid文件,可以通过该项指定
	
	port 6379	--该项修改Redis的端口号
	
	bind 127.0.0.1	--绑定的主机地址
	
	timeout 300		--当客户端闲置多长时间后关闭连接,如果指定为0,表示关闭该功能
	
	loglevel verbose 	--指定日志记录级别,Redis总共分为四个级别：debug、verbose、notice、warning,默认为verbose
	
	logfile stdout 		--日志记录方式,默认为标准输出,如果配置Redis为守护进程方式运行,而这里又配置为日志记录方式为stdout,则日志将会发送给/dev/null
	
	databases 16 	--设置数据库的数量,默认数据库为0,可以使用select <dbid>命令在连接上指定数据库id
	
	指定在多长时间内,有多少次更新操作,就将数据同步到数据文件,可以多个条件配合
		save <seconds><changs>
		Redis默认配置提供了三个条件
		save 900 1		--900秒(15分钟)内有1个更改
		save 300 10		--300秒(5分钟)内有10个更改
		save 60 10000	--同上
	
	rdbcompression yes	--指定存储至本地数据库时是否压缩,默认为yes,Redis采用LZF(压缩算法)压缩,如果为了节省CPU时间可以关闭该选项,但会导致数据库文件变的巨大
	
	dbfilename dump.rdb	--指定本地数据库文件名,默认值：dump.rdb
	
	dir ./		--指定本地数据库存放目录
	
	requirepass foobared	--设置Redis连接密码,如果配置了密码,客户端连接时需要通过AUTH <password>提供密码,默认关闭
	
	maxclients 128 	--同一时间最大客户端连接数,默认无限制：0
	
	maxmemory <bytes>	--指定Redis最大内存限制
	
	注：启动Redis时使配置文件生效：Redis-server redis.conf
	
2.Redis中的内存维护策略
	expire key seconds：	--设置key的过期时间
		ttl key		--返回值：-1永久有效、-2已过期，不存在
		
	采用LRU算法托管给本机将不用的数据删除：
		volatile-lru：设定超时时间的数据中,删除最不常用的数据
		allkeys-lru：查询所有的Key中最不常用的数据进行删除,这是最广泛的策略
		volatile-random：在已设定超时的数据中随机删除
		allkeys-random：查询所有的key,之后随机删除
		volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行操作删除
		noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回
		volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键
		allkeys-lfu：从所有键中驱逐使用频率最少的键
		
	Redis关闭
		断电、非正常关闭：
			kill -9 pid
			Redis数据会容易丢失
			
		正常关闭：
			Redis-Cli 键入 ShutDown
			数据保存

3.Redis常用命令
	key *：返回满足的所有键,可以模糊查询(keys abc* 代表以abc开头的键(通配符：*代表所有 ?代表一个字符))
	exists key：是否存在指定的key,存在返回1,不存在返回0
	expire key seconds：设置key的过期时间,单位为秒
	del key：删除某个key
	ttl key：查看剩余时间,如果key不存在时,返回 -2,存在但没有剩余生存时间时 返回-1,否则：以秒为单位返回key的剩余生存时间
	persist key：取消过期时间
	PEXPIRE key milliseconds：修改key的过期时间,单位为毫秒
	select：选择数据库 数据库为0-15(默认为16个数据库,可以通过配置文件修改)
	move key dbindex：将当前数据中的key转移到其它数据库
	randomkey：随机返回一个key
	rename key key2：重命名key
	echo：打印命令
	dbsize：查看数据库的key数量
	info：查看数据库信息
	config get *实时存储收到的请求,返回相关的配置
	TYPE key：返回key所存储值的类型
	flushdb：清空当前数据库
	flushall：清空所有数据库
	
	key的命名建议：
		redis单个key允许存入512MB大小
			key不要太长,尽量不要超过1024字节,这不仅消耗内存,而且会减低查询效率
			key也不要太短,太短的话,key的可读性会降低
			在一个项目中,key最好使用统一的命名模式,例如user:123:password(为什么冒号,为了突出是Redis非关系型数据库)
			key名称区分大小写
			
4.Redis数据类型
	String类型：
		String类型结构是最简单的key-value类型,value其不仅是string,也可以是数字,布尔值,也可以是包含更多类型的特殊类型
		String类型是二进制安全,意思是string可以包含任何数据(比如二进制的图片数据、字符串、数值、bool等)
		
		赋值操作：
			频繁赋值的话,会覆盖掉原有的值,无视类型
			
			setnx key value：该操作会判断值是不是存在,不存在(赋值,返回1),存在(不赋值,返回0),其目的是为了解决分布式锁方案之一
			
			setex key 10 zhangsan：设置key的值为zhangsan,过期时间为10
			
		取值操作：
				get key：如果key存在,返回值,反之返回nil,如果值不是字符串类型,返回一个错误
				getrange key start end：截取字符串
				getbit key offset：对key所存储的字符串值,获取指定偏移量上的为(bit)
				getset key value：GetSet设置指定key的值,并返回旧值,当key不存在时,返回nil
				strlen keys：返回key所存储的字符串值的长度
				mset k1 v1 k2 v2：一次写入多个值
				mget k1 k2 k3：批量读
				INCR key：INCR命令将key中存储的数字值加1,如果key不存在,那么key的值会被初始化为0,再做INCR操作
					INCRBY key 增量值：指定每次增加的值
				DECR key：减一
					DECRBY key 减量值：指定每次减去的值
				append key value：该命令为指定的Key追加至末尾,如果不存在,为其赋值
				
		