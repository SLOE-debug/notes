1.Redis.conf
	daemonize no	--Redis默认不是以守护进程的方式运行,可以通过该配置项修改,使用yes启动守护进程(守护进程即当终端退出也还会继续运行的进程)
	
	pidfile /var/run/readis.pid		--当Redis以守护进程方式运行时,Redis默认会把pid写入/var/run/readis.pid文件,可以通过该项指定
	
	port 6379	--该项修改Redis的端口号
	
	bind 127.0.0.1	--绑定的主机地址
	
	timeout 300		--当客户端闲置多长时间后关闭连接,如果指定为0,表示关闭该功能
	
	loglevel verbose 	--指定日志记录级别,Redis总共分为四个级别：debug、verbose、notice、warning,默认为verbose
	
	logfile stdout 		--日志记录方式,默认为标准输出,如果配置Redis为守护进程方式运行,而这里又配置为日志记录方式为stdout,则日志将会发送给/dev/null
	
	databases 16 	--设置数据库的数量,默认数据库为0,可以使用select <dbid>命令在连接上指定数据库id
	
	指定在多长时间内,有多少次更新操作,就将数据同步到数据文件,可以多个条件配合
		save <seconds><changs>
		Redis默认配置提供了三个条件
		save 900 1		--900秒(15分钟)内有1个更改
		save 300 10		--300秒(5分钟)内有10个更改
		save 60 10000	--同上
	
	rdbcompression yes	--指定存储至本地数据库时是否压缩,默认为yes,Redis采用LZF(压缩算法)压缩,如果为了节省CPU时间可以关闭该选项,但会导致数据库文件变的巨大
	
	dbfilename dump.rdb	--指定本地数据库文件名,默认值：dump.rdb
	
	dir ./		--指定本地数据库存放目录
	
	requirepass foobared	--设置Redis连接密码,如果配置了密码,客户端连接时需要通过AUTH <password>提供密码,默认关闭
	
	maxclients 128 	--同一时间最大客户端连接数,默认无限制：0
	
	maxmemory <bytes>	--指定Redis最大内存限制
	
	注：启动Redis时使配置文件生效：Redis-server redis.conf
	
2.Redis中的内存维护策略
	expire key seconds：	--设置key的过期时间
	ttl key		--返回值：-1永久有效、-2已过期，不存在
		
	采用LRU算法托管给本机将不用的数据删除：
		volatile-lru：设定超时时间的数据中,删除最不常用的数据
		allkeys-lru：查询所有的Key中最不常用的数据进行删除,这是最广泛的策略
		volatile-random：在已设定超时的数据中随机删除
		allkeys-random：查询所有的key,之后随机删除
		volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行操作删除
		noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回
		volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键
		allkeys-lfu：从所有键中驱逐使用频率最少的键
		
	Redis关闭
		断电、非正常关闭：
			kill -9 pid
			Redis数据会容易丢失
			
		正常关闭：
			Redis-Cli 键入 ShutDown
			数据保存

3.Redis常用命令
	key *：返回满足的所有键,可以模糊查询(keys abc* 代表以abc开头的键(通配符：*代表所有 ?代表一个字符))
	exists key：是否存在指定的key,存在返回1,不存在返回0
	expire key seconds：设置key的过期时间,单位为秒
	del key：删除某个key
	ttl key：查看剩余时间,如果key不存在时,返回 -2,存在但没有剩余生存时间时 返回-1,否则：以秒为单位返回key的剩余生存时间
	persist key：取消过期时间
	PEXPIRE key milliseconds：修改key的过期时间,单位为毫秒
	select：选择数据库 数据库为0-15(默认为16个数据库,可以通过配置文件修改)
	move key dbindex：将当前数据中的key转移到其它数据库
	randomkey：随机返回一个key
	rename key key2：重命名key
	echo：打印命令
	dbsize：查看数据库的key数量
	info：查看数据库信息
	config get *实时存储收到的请求,返回相关的配置
	TYPE key：返回key所存储值的类型
	flushdb：清空当前数据库
	flushall：清空所有数据库
	
	key的命名建议：
		redis单个key允许存入512MB大小
			key不要太长,尽量不要超过1024字节,这不仅消耗内存,而且会减低查询效率
			key也不要太短,太短的话,key的可读性会降低
			在一个项目中,key最好使用统一的命名模式,例如user:123:password(为什么冒号,为了突出是Redis非关系型数据库)
			key名称区分大小写
			
4.Redis数据类型
	String类型：
		String类型结构是最简单的key-value类型,value其不仅是string,也可以是数字,布尔值,也可以是包含更多类型的特殊类型
		String类型是二进制安全,意思是string可以包含任何数据(比如二进制的图片数据、字符串、数值、bool等)
		
		赋值操作：
			频繁赋值的话,会覆盖掉原有的值,无视类型
			
			setnx key value：该操作会判断值是不是存在,不存在(赋值,返回1),存在(不赋值,返回0),其目的是为了解决分布式锁方案之一
			
			setex key 10 zhangsan：设置key的值为zhangsan,过期时间为10
			
		取值操作：
				get key：如果key存在,返回值,反之返回nil,如果值不是字符串类型,返回一个错误
				getrange key start end：截取字符串
				getbit key offset：对key所存储的字符串值,获取指定偏移量上的为(bit)
				getset key value：GetSet设置指定key的值,并返回旧值,当key不存在时,返回nil
				strlen keys：返回key所存储的字符串值的长度
				mset k1 v1 k2 v2：一次写入多个值
				mget k1 k2 k3：批量读
				INCR key：INCR命令将key中存储的数字值加1,如果key不存在,那么key的值会被初始化为0,再做INCR操作
					INCRBY key 增量值：指定每次增加的值
				DECR key：减一
					DECRBY key 减量值：指定每次减去的值
				append key value：该命令为指定的Key追加至末尾,如果不存在,为其赋值
	
	其他类型命令请参考reids文档：
	
5.Redis管道操作
	//获取redis连接对象
		ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("192.168.2.8:6379");
		var db = redis.GetDatabase();
	//创建管道
		var pipe = db.CreateBatch();
	//该List为结果列
		List<Task<long>> ls = new List<Task<long>>();
	//为age自增10000次
		for (int i = 0; i < 1000; i++)
		{
			ls.Add(pipe.StringIncrementAsync("qq"));
		}
	//运行管道
		pipe.Execute();
		pipe.WaitAll(ls.ToArray());
	//输出结果
		foreach (var item in ls)
		{
			Console.WriteLine(item.Result);
		}
	//释放资源
		redis.Close();
		redis.Dispose();
	
6.Redis事务
	Redis的事务对的会成功,错误的还是错误,并不会影响前面成功的
	
	开启事务
		开启事务,执行一系列的命令,命令不会立即执行,会放在一个队列中,如果你执行了事务,那么这个队列中的命令将全部执行,如果取消事务,那么这个队列中的命令全部作废
		开启事务：multi
		输入要执行的命令：该命令将被放入到队列中
	执行事务
		exec
	取消事务
		discard
		
	注：redis的事务想发挥事务功能,需要配置watch监听机制
	
	在开启事务之前,先通过watch监听一个key或多个,在开启事务之后,如果有其他客户端修改了我监听的key,事务会自动取消,等同于乐观锁
	如果执行了事务或者取消了事务,watch监听自动消除
	
7.Redis的持久化AOF配置
	AOF想对比RDB持久化来说,AOF前期占用空间小(但保存的速度比RDB慢),而后期AOF文件将越来越大(传输困难),AOF保存的不是二进制文件,而是保存所有写操作到文本文件,直接打开可以看懂
	AOF相对RDB更安全,官方建议同时开启RDB和AOF,以防数据丢失,同时开启时当redis服务器宕机重启后,会优先选择加载AOF文件
	如果先开启RDB,再开启AOF,如果RDB执行了持久化,那么RDB文件中的内容会被AOF覆盖掉
	
	appendonly yes						--开启AOF持久化
	appendfilename "appendonly.aof"		--AOF文件的名称
	--AOF持久化执行的时机
	#appendfsync always					--每执行一个写操作立即持久化,性能比较低
	appendfsync everysec				--每秒执行持久化
	#appendfsync no						--根据操作系统以及环境的不同,将在一定的时间内执行一次持久化,时间不确定s
	
8.Redis避免主从master单点故障(哨兵模式)
	
	哨兵配置：
		daemonize yes		--哨兵是否后台启动
		sentinel monitor 名称 localhost 6379 2	--指定master节点的ip和端口(主)
		sentinel monitor 主节点名称 主节点IP(127.0.0.1) 6379 2	--指定master节点的ip和端口(从)
		sentinel down-after-milliseconds 主节点名称 10000	--哨兵每隔多久监听一次redis架构
		
	三个sentinel.conf文件:
		sentinel1.conf(该文件作为master,相同)
			daemonize yes
			sentinel monitor master localhost 6379 2		--master名称随便起
			sentinel down-after-milliseconds master 30000
		sentinel2.conf(从机)
			daemonize yes
			sentinel monitor master master 6379 2			--此处两个master必须和主机相同
			sentinel down-after-milliseconds master 30000	
		sentinel3.conf(和sentinel2一样)
	
	docker-compose.yml
		services:
        redis1:
                image: redis
                restart: always
                container_name: redis1
                ports:
                       - 3000:6379
                volumes:
                        - ./conf/redis1.conf:/usr/local/redis/redis.conf		--此处不可省略为.conf/redis1.conf:/usr/local/redis/redis.conf,否则redis.conf将是一个文件夹
                        - ./conf/sentinel1.conf:/data/sentinel.conf				--该处注意事项同上
                command: ["redis-server","/usr/local/redis/redis.conf"]
        redis2:
                image: redis
                restart: always
                container_name: redis2
                ports:
                        - 3001:6379
                volumes:
                        - ./conf/redis2.conf:/usr/local/redis/redis.conf
                        - ./conf/sentinel2.conf:/data/sentinel.conf
                links:
                        - redis1:master
                command: ["redis-server","/usr/local/redis/redis.conf"]
        redis3:
                image: redis
                restart: always
                container_name: redis3
                ports:
                        - 3002:6379
                volumes:
                        - ./conf/redis3.conf:/usr/local/redis/redis.conf
                        - ./conf/sentinel2.conf:/data/sentinel.conf
                links:
                        - redis1:master
                command: ["redis-server","/usr/local/redis/redis.conf"]

	
	每个redis执行命令：redis-sentinel sentinel.conf

8.Redis集群
	集群是在主从以及哨兵的基础之外,提升redis存储数据的能力
	
	特点：
		redis集群无中心,没有主从机制,每一个节点都是一个普通的redis
		Ping-Pang机制,A节点向B节点发送一个消息,B节点返回,即创建连接,反之B节点没有返回,那么A节点将认为B节点挂掉了,该机制是为了投票机制
		投票机制是A向B发送消息,B没有返回,那么A将向C发送消息,要C去访问B,如果B还是没有返回,那么现在票数是两票,票数多的话,那么就认为B宕机
		redis的集群节点数量必须是2n + 1
		redis集群中默认分配了16384个hash槽,在存储数据时,会将key进行crc16算法,并且对16384取余,根据最终结果,将key-value存放到执行的redis节点中
		为了保证数据的安全性,每个集群的节点,至少要跟着一个从节点,从节点负责实时同步数据,然后当主节点挂掉时,从节点顶替上位
		如果集群时当A节点被访问的次数过多,那么就针对该节点搭建主从,并不会受到任何影响
		当redis集群中,超过半数的节点宕机后,redis集群就瘫痪了
		

.Redis常见问题
	当Key的生存时间到了,Redis会立即删除嘛？
		不会删除,所以Redis做了一下方案
			1.定期删除：
				Redis每隔一段时间就会去查看Redis设置了过期时间的key(如果当Redis的key过多的时候,那么这种查询会很消耗性能),所以会在100ms的间隔中默认查看3个Key,虽然间隔很短,但是查看的key太少了,那么没有被查看的key还会在内存中,那么就提供了惰性删除方案
				
			2.惰性删除：
				当你查询一个已经过了生存时间的key时,Redis会先查看key的生存时间,如果已经到了,那么直接删除,返回空值
				
	缓存穿透
		查询数据时,Redis中没有,数据库中也没有,最终导致Redis,数据库都宕机
			解决方案：
				1.当ID时自增时,那么将数据库中可能出现的最大值的ID放在Redis中,在需要查询数据库时,比较一下ID,如果大于最大值,就不去查询
				2.如果ID不是整形,那么可以将全部的ID存在set中,在查询之前,先询问set
				3.添加访问限制,可以将IP的访问次数添加限制,如果同一个IP访问大量的不存在的数据,那么将限制查询操作
	
	缓存击穿
		查询一个热门数据,可能一时间会有几千个请求,但是如果在某一时间点,Redis中的热门数据过期了,那么这几千个请求会同时去数据库,也会发生数据库宕机
			解决方案：
				1.在访问缓存时没有数据的时候,直接添加锁,只让几个请求去访问数据库,避免数据库宕机
				2.热门数据的时效性去掉
				
	缓存雪崩
		当大量缓存同时到期是,最终大量的请求去访问数据库,导致数据库宕机
			解决方案：
				1.将缓存中的数据的时效性设置为30-60的随机时间
				
	缓存倾斜
		热门数据放在了一个Redis节点上,导致Redis节点无法承受大量的请求,最终Redis宕机
			解决方案：
				1.扩展主从架构,搭建大量的从节点,缓解Redis的压力(用钱堆出来的)
				2.在Net Core中做缓存,在查询Redis之前,先去查询Net Core中的缓存
	