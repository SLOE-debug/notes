1.DDD领域驱动设计
	POP：面向过程
	OOP：面向对象
		静态：类会在运行时确定 or 编译时确定
		不方便扩展
		
	AOP：面向切面编程
		既不修改类,又能扩展功能
	
	DDD(Domain-Driven-Design)
		领域-驱动-思想
			例：电商项目
					用户中心
					商品中心
					支付中心
					评论中心
				
				每个模块都拆分开来,相对独立,相对隔离,并不存在A调用B,B调用A的情况
			
		service、DTO、entity、repository等概念都源自于DDD
		
	DDD落地
		项目结构
			User Interface			
				UI用户展示层
			Application Layer		
				应用服务层,该层负责请求转发、跨领域问题(应为有时候一个功能不是一个领域可以搞定的),不包含任何领域逻辑
			Domain Layer			
				Domain应用领域细化业务层,最核心最重要的层,内部实现了业务逻辑以及对数据的操作
			Infrastrucature Layer	
				基础设施层,包括Common、Utility、数据库增删改查方法、Redis的操作、常用帮助类、数据验证等
				
			聚合根：
				(EFModel and 行为)充血模型 整合成一个实体
				实例1
				实例2
				...
				(实例1 and 实例2 and ...) 整合成一个聚合根
			
			领域服务：是在Domain里,目的就是解决有些业务并不知道放在那个实体里,那么给它们单独创建一个服务
			
			工厂：领域/实体太复杂了
			
			仓储：管理数据操作
			
2.基础
	SOA面向服务编程
		建立一个服务总线,所有子模块提交信息需要满足服务总线的格式,获取的信息也是服务总线所提供的,可以看成是对现有的模块的 升级 改进 整合
	
	SOA和微服务的区别
		SOA为了重用,而微服务是为了重写
		SOA更水平,微服务是垂直的
		SOA自上而下,微服务自下而上
			自上而下：从一个大系统,开始考虑，逐个分析
			自下而上：从底层开始考虑,逐个向上分析
			
	需要满足以下两点：
		服务高可用：服务不可以挂掉,每个服务可用性必须是5或者更高,2 3个根本不够用,那么服务挂掉了相当于上层体系全部瘫痪
	
		服务可伸缩：处理能力能够动态增加,能够动态减少
	
		以上要求可以用集群、负载均衡方式解决
	
	微服务核心：
		服务发现--调用方如何发现服务？
		负载均衡--如何调用服务？
	
		三个版本：
			1.nginx版本：集中式代理,纯粹的负载均衡									--服务注册/服务发现
			2.客户端嵌入：Consul,负载均衡,服务注册与发现,健康检查					--熔断/限流/降级等服务治理
				好处：功能强大,全自动服务注册与发现,健康检查
				缺点：客户端集成复杂,该方式在客户端实现的复杂均衡
			3.服务网格-ServiceMesh：主机+代理,2018年推出,被称为ServiceMesh的元年	--ServicerMesh
				将服务以及网关都注册在服务器上,一对一,没有第三方的代理
				
		服务治理：某些特殊情况,我们不能无约束的一直提供某个服务的处理能力,我们需要限制、降级、增加处理能力、缓存、鉴权授权
			服务降级：牺牲别的模块,干掉他,然后把该模块占用的资源,给别的模块
		
		网关(门面模式)：
			诞生：为了保护服务的ip,暴露网关ip,多个UI调用多个服务时,负责映射服务
		
		跨进程通讯：
			1.共享存储：相当于docker的容器卷,都存在一个地方,Redis/DB/Queue/硬盘文件
				特点：被动式通讯、门槛低
			2.服务通讯：WebService/WCF/WebApi/甚至ashx、aspx
				特点：主动触发、数据序列化传递、跨平台、跨语言、http穿透防火墙
			3.RPC：Remote Procedure Call
				特点：NetRemoting Net平台独有的,不支持跨平台、gRPC高性能、开源和通用的RPC框架，面向服务和移动端,基于HTTP/2设计
				
	微服务架构：
		瞬态故障处理-Polly：是一种.Net弹性和瞬态故障处理库,允许我们以非常顺畅和线程安全的方式来执行重试、短路、超时、故障恢复等策略
		
		分布式追踪(简称APM)-Skywalking：分布式追踪和APM的Server端,他将包含Collector、Storage、独立的WebUI,并使用OpenTracing规范来设计追踪数据
	
		日志-Exceptionless：开源的日志收集和分析框架,能为应用程序提供实时错误、特性和日志报告
		
		配置中心-Apollo：配置管理平台,能够集中化管理应用不同环境、不同集群的配置,配置修改后能够实时推送到应用端,并且具备规范的权限、流程治理等特性
		
		分布式锁：单进程下,多线程操作同一个对象,可以用lock锁保证只有一个进程能进行,多进程(分布式)下,如何保证该对象在任意时刻只能一个进程进入呢？变量A是有状态的,不同服务器进程内,跨进程的互斥机制来控制共享资源的访问,这就是分布式锁

		CI/CD-Jenkins：Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具,主要用于持续、自动的构建/测试软件项目、监控外部的任务的运行
	
	运行项目：dotnet 项目UI层名称.dll --urls="http://*:5177" --ip="127.0.0.1" --port=5177
	
	NetCoreWebApi配置为微服务
		在项目program入口文件处配置接收命令行参数
			main:
				new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddCommandLine(args).Build();
				
		Startup注入：
			public void ConfiggureServices(IservicCollection services){
				service.AddTransient<接口,实例>();
			}
	
3.微服务配置
	Nginx：dotnet启动服务,nginx集群,Uuse Interface层请求,最基础的集群,需要自行配置nginx集群列表
	
	Consul：请跳转至第4序列查看Consul具体配置
	
4.Consul
	启动：consul agent -dev		--看到consul agent running,那么服务启动成功,访问 http://localhost:8500 即可
	
	配置：
		服务实例注册
			代码：
				ConsulClient client = new ConsulClient(c =>
				{
					c.Address = new Uri("http://localhost:8500");		//请求的consul地址一般默认端口号为8500
					c.Datacenter = "dc1";
				});

				var service = new AgentServiceRegistration()
				{
					ID = "mlbz" + Guid.NewGuid(),
					Name = "mlbz",						//这个name等于consul中的分组名称
					Address = configuration["ip"],		//ip以及下面的port来自控制台输入
					Port = int.Parse(configuration["port"]),
					Check = new AgentServiceCheck()		//健康检查
					{
						DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),	//健康检查失效后多长时间取消登记
						Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔，或者称为心跳间隔
						HTTP = $"http://{configuration["ip"]}:{configuration["port"]}/api/health/Index",//健康检查地址
						Timeout = TimeSpan.FromSeconds(5)		//过期时间
					}
				};
				client.Agent.ServiceRegister(service).Wait();
				lifetime.ApplicationStopping.Register(() =>
				{
					client.Agent.ServiceDeregister(service.ID).Wait();//服务停止时取消注册
				});
		服务端发现：启动：consul即可
		
		客户端调用
			代码：
				ConsulClient client = new ConsulClient(c =>
				{
					c.Address = new Uri("http://localhost:8500");
					c.Datacenter = "dc1";
				});
				var response = client.Agent.Services().Result.Response.ToArray();	//此处获得的就是服务器的键值对列表
				
			
			负载均衡策略：
				轮询：
					private static int Idx = 0;//定义静态变量,每次加1
					
					Idx = Idx == response.Length - 1 ? 0 : Idx;
					var service = response[Idx++];
					string Addres = $"http://{service.Value.Address}:{service.Value.Port}/Summary";
				
				平均(随机)：
					service = response[new Random().Next(0, response.Length)];
		
				权重：
					服务注册时把Tags当做权重：
						AgentServiceRegistration()
						{
							...
							Tags = string[]{ configuration["wight"] }
							...
						}
						
					客户端调用时：
						List<KeyValuePair<string, AgentService>> ls = new List<KeyValuePair<string, AgentService>>();
						foreach (var item in response)
						{
							var Count = int.Parse(item.Value.Tags?[0]);
							for (int i = 0; i < Count; i++)
							{
								ls.Add(item);
							}
						}
						service = ls[new Random().Next(0, ls.Count)];

5.网关(路由)				
	Ocelot(负责转发请求、负载均衡)：
		建一个Core WebApi项目：
			注册服务	services.AddOcelot();
			添加中间件	app.UseOcelot();
			
			Program类下CreateHostBuilder方法添加Host方法.ConfigureAppConfiguration(c=>{c.AddJsonFile("configuration.json", optional: false, reloadOnChange: true);})
		
			configuration.json文件内容请参照https://ocelot.readthedocs.io/
		
		Ocelot缓存：
			引入包：Ocelot.Cache.CacheManager
			
			注册服务：services.AddCacheManager(x=>{x.WithDictionaryHandle();  //默认字典缓存})
			
			配置文件：ReRoutes:[ { "FileCacheOptions": { "TtlSeconds": 15, "Region": "somename" } } ]
				
			自定义缓存：
				services.AddSingleton<IOcelotCache<CachedResponse>, CustomCache>();
				
				自定义缓存类：
					class CustomCache : IOcelotCache<CachedResponse>		//实现接口,可以整合成redis分布式
		
		服务治理：
			超时处理：
				引入包：Ocelot.Provider.Polly
				
				注册服务：services.AddPolly()
				
				配置文件：ReRoutes:[ { "QoSOptions": { "TimeoutValue": 4000 }} } ]

			熔断：
				配置文件：ReRoutes:[ { "QoSOptions": { "ExceptionsAllowedBeforeBreaking": 3, "DurationOfBreak": 1000, "TimeoutValue": 4000 }} } ]

			限流：
				配置文件：ReRoutes:[ { "QoSOptions": { "ExceptionsAllowedBeforeBreaking": 3, "DurationOfBreak": 1000, "TimeoutValue": 4000 }} } ]

			请求聚合：
				配置文件：ReRoutes:[], "Aggregates": [{"RouteKeys": ["Tom","Laura"],"UpstreamPathTemplate": "/","Aggregator": "FakeDefinedAggregator"}]

6.用户认证(ids4)
	认证策略
		Session共享：做一个服务器,只用来存session
		会话粘滞：属于一个IP的客户端都发往同一个服务器
		请求携带：请求中携带用户信息,每个服务模块进行认证
		ids4-JWT:该方式是ids4做鉴权中心,返回ToKen(不对称可逆加密,公钥(服务模块解密使用,该值为鉴权中心提供)---私钥(鉴权中心加密使用))

	具体操作请参考：鉴权中心-IdnetityServer4笔记

7.Docker部署
	Kestrel：精简的httpServer,处理http请求字符串的类库dll文件
	
	虽好,但不够用,只是个简单版的,生产环境不可直接用
	
	如果还想部署到iis上,需要在iis上安装aspnetmoduleV2,2.0以下装aspnetmodule
	
	PS:编译目录也可以部署到IIS上，但是需要web.config