1.基础知识：
	交互三步：用户输入数据、程序处理数据、返回结果
	
	JS环境：运行在浏览器自带的JS解释器中,“解释”执行,也可以单独安装专门的解释器软件,该软件一般使用在服务器
	
	什么叫做解释执行：由上到下边读边解释,跟读书一样,读一行解释一行
	
	JSer：跟码农一样,对JS大佬的统称
	
	JS的来历：NetScape跟Java对立（或者叫做羡慕）,NetScape高层让布兰登艾奇学习Java,为了偷艺,而布兰登艾奇特别特别讨厌Java,为了应付差事,花了10天把四门语言(具体哪四门不知道)拼凑成了公司高层要的所谓的Java,之后慢慢演变成JS,因为涉及JS时间之短,所以JS内部代码混乱不堪,学到后面你就懂了
	
	JS三大标准：
		ECMAScript标准：标准了JS的核心功能
		
		DOM标准：标准了对网页内容(HTML元素、CSS样式、事件)操作的功能
		
		BOM标准：没标准,由浏览器开发商自行实现
		
	JS输出：console.log("Hello World")		--log方法：向控制台输出一行日志	JS严格区分大小写,对于字符串单双引号都可以
	
2.变量：
	舍入误差：Number类型在JS计算中会有舍入误差,2-1.6会得到0.3999999999...,原本是0.4,解决办法：变量名.toFixed(2)		--参数2的意思是以该变量后2位小数四舍五入
	
	返回一个字符串的Unicode编码：str.charCodeAt(0)		--0代表下标几,凡是方法中有At的都是指的下标
	
	JS数据类型之间的转换
		1.String：x.toString();
		2.Number：Number(x)
		3.String——>Number：parseInt("Str");
			--通过下标遍历每一个字符,直到遇到不是数字的字符时跳出,如果是空格忽略,如果是数字转换为相对应的数字,如果第一个字符就不是数字,那么直接返回NaN
			
		4.String——>double：parseFloat("Str");
			--跟parseInt一样,只不过该函数认识小数点,但是只认第一个,遇到第二个小数点,跳出
			
		NaN数据：
			1.在C#中下标以0开始,但是在Js中是以NaN开始,NaN意思为：Not a Number(不是数字的数字),但其类型为Number
			
			2.NaN和NaN作比较,返回False,和任何数字作比较也是,False,全都是False,而拿NaN和任何数据做运算,返回值一定是NaN
			
			3.isNaN(x)：该方法专门用来判断一个数据是不是NaN,是返回true,反之返回false
			
		Infinity数据：表示无穷大,该数据为Number类型
		
		补充：凡是在变量之间操作的时候,算出来的结果值是NaN,那么某个变量之间的转换肯定出错了
		
	JS数据运算：
		加法：字符串跟任何类型想加,都是字符串,数字和布尔值相加,布尔值转换成：true=1,flase=0,跟数字相加,
		
		减法：任意类型数据做减法,都会被转成数字类型,如果有变量不能自动转为数字(空除外),则返回NaN
		
		除法：如果除数为0,将返回Infinity,算是错误,计算机就无法表示该数据,当0/0时,会返回NaN
	
		补充：typeof方法typeof(),会得到所传参数的数据类型
		
	
	随机数：Math.random():0<=n<1;		--取0-1之间的随机小数
	
	查看一个数据的类型：Object.getPrototypeOf(s1);
		
	关系运算：
		字符串：
			1.字符串跟字符串作比较时,会把每一个字母转换成undefined,通过该字对应的数字作比较
			
			2.字符串与数字做判断时,字符串将会自动转换为数字,不止字符串,任何类型跟数字作比较,都会转成数字
		
		布尔：布尔类型参与比较,都会变成数字
		
		undefined类型：该类型在比较时会自动转换为null值,所以该值比较时肯定会返回true,解决方法,使用===,三等号,不带自动转换的类型比较,原来是什么值就是什么值,但是该比较必须类型和值都相等,才会返回true,否则返回false
		
		短路逻辑：如果前一个判断足矣得出结论,则后续条件不执行
		
		位移：
			1.左移：n<<m == n * (2的m次方)
				例：3<<1 == 3 * (2的一次方)、3<<2 == 3 * (2*2)
				
			2.右移：n>>m == n / (2的m次方)
				例：64>>1 == 64 / 2、64>>2 == 64 / (2*2)
		
		三元表达式：
			一个条件：a==b?"等于":"不等于"
			多个条件：a==b?"等于":
					  b==1?"等于":
						  "不等于"
						  
		instanceof关键字：用于判断某个值是不是从某个值创建出来的,是的话返回true,不是的话返回false
			示例：null instanceof Object;该语句为false,我们通过typeof()方法来看的话null是属于Object类型,但是,在这里null只是表示一个空值,所以,返回false
		
		补充：undefined类型是由null类型继承而来,在当时Js发布的时候是没有undefined类型的,到后来发现,没有该类型还真不行,所以就从null类型中劈出来一部分做成了undefined类型
		
3.提示信息prompt(太老了不常用,调试用的最多)：
	用处：用户输入数据、收集数据的对话框

	淘汰原因：不能修改样式、每个浏览器弹出的对话框样式都不可控

	补充：凡事从页面上获得的数据,都是字符串,必须进行处理后使用
	
4.自定义函数
	全局函数：ECMAScript定义了标准,由各浏览器厂商已经实现的函数,直接调用即可
		1.isNaN：第二点里面有,自己看去
		2.parseFloat：同上
		3.parseInt：同上
		4.isFinite()：用于判断一个数是否已经超过了数字的最大值
		5.encodeURI：将url中的非法字符转为单字节符号,该方法不会修改原字符串,必须定义变量接收			--编码
		6.decodeURI：将encodeURI转后的字符串,转换为原文,该方法也不会修改原字符串,必须定义变量接收		--解码
		7.encodeURIComponent：对url的非法部分(及保留字)进行再编码,该函数可以编码单字节					--编码
		8.decodeURIComponent：转为原文																	--解码
		9.eval：专门执行字符串格式的代码,可以将服务器发送来的字符串,直接转换为对象
		10.json.stringfy()：将对象、数组转换成字符串
		11.json.parse()：将字符串转成json对象
		
		补充：1.unicode编码：每个字符2字节
			  2.utf-8编码：字母数字单字节,汉字3字节
			  3.url保留字：如果参数值中出现保留字,那么该链接为非法,解决方法：使用第7点全局函数
				保留字：例$、/、?、:、等等,自行百度
			  4.将数据通过url发送时,都要先编码再发送,反之,接收时也要记得先解码再处理
	
5.数组
	创建数组：数组都是用[]创建出来的
		例：var arr = [];、var arr = [1,2,3]、例外：var arr = new Array(3);、var arr = new Array(3);
	
	数组两不限制：不限制元素个数、不限制元素数据类型
	
	特性：默认输出时每个元素之间都有个逗号,数组支持直接输出
	
	数组越界：没有该错误,只会输出undefined,也就是说越界之后所有越界下标所指向的元素为undefined
	
	数组API：
		1.arr.length：数组长度,可以设置其值,如果比之前的长度大,扩容,反之,缩容直接把后面的砍掉,无法找回,垃圾回收机制也不回收掉
			例：固定语法：arr[arr.length] = 新值;		--该语法为在arr数组后面追加一个新元素
		2.x.toString():简单不解释,只是有时候在做拼接操作时,如果拼接有字符串,JS会自动调用该方法
	
		3.x.valueOF()：同toString();
		
		4.arr.join()：简单不解释
		
		5.Concat()：拼接两个或多个数组,并返回一个新数组
			例：var arr1 = [1,2,3];
				var arr2 = [7,8,9];
				var arr3 = arr1.Concat(4,5,6,arr2);		--该操作不会影响或改变arr1和arr2数组,只会返回一个新数组对象
		
		6.Slice()：Slice(start,[end]+1),start表示从哪个下标开始取,end表示结束的下标(含头不含尾,因为该方法会取到end前一位,所以要加一),可以省略也可以赋负值,这里的负值表示,-1表示最后一个元素,-2表示倒数第二个元素
			例：var subArr = arr.Slice(1,4);、var subArr = arr.Slice(-1,-4);
			
		7.arr.splice()：删除、插入、替换,arr.Splice(要插入(删除替换)的下标,0(输入0插入,输入1就从该方法第一个参数所传的下标开始删一个,2就是两个,以此类推),item1,item2,……);	--该方法会改变数组
			例：arr.splice(0,0,"a","b");	--插入：从该数组第一位开始插入2个元素(a和b),具体效果自行测试
				arr.splice(0,1,"a");		--替换：从该数组第一位开始删除下标为0的元素,在从数组第一位插入一个新元素(a),具体效果自行测试,该方法返回值为替换掉的值
				arr.splice(0,1);			--删除：从该数组第一位开始删除下标为0的元素,具体效果自行测试,该方法返回值为,删除掉的值
				
		8.arr.reverse()：颠倒数组

		9.arr.sort()：简单不解释
		
		10.arr.pop()：输出数组最后一个元素,并返回该值,如果数组为空则返回undefined
		
	垃圾回收机制：如果一个新对象地址替换了一个旧对象地址,那么该旧对象将会被释放(释放有延迟,会等一会再释放)
	
	补充：JS内置对象不但封装存储,而且封装常用API
		  API：已经实现的方法,直接调用
	
6.关联数组：
	赋值：arr["Name"] = "张三";
	
	创建时赋值：var arr = {"Name":"张三",……};		--关联数组创建时赋值将中括号[]换成了大括号{}
				var arr = {"key1":"value1"};
				
	for in：该循环专门遍历关联数组用的
		语法：for(var key in arr)
		
	length：关联数组length作废
	
	剩下一些特征同上

7.Bom/DOM
	Bom：浏览器对象模型
		对象：Navigator(判断使用的浏览器)、Window、Screen(获取屏幕)、history、location、screen、document、event(事件)
	
	Window对象属性：
		1.innerHeight：返回文档显示区的高度
		2.innerwidth：返回文档显示区的宽度	IE不支持
		3.outerhtight：返回窗口的外部高度,包括了工具栏,菜单栏的高度
		4.outerwidth：返回窗口外部的宽度,包括了滚动条的宽度
	
	DOM：页面中的每一个元素都是一个DOM对象
	
	DOM树的两种：
		1.节点树：把文档中所有内容全部看作node对象
		2.元素树：把文档中的标签看做node对象
	
	DOM节点：
		元素节点：
			1.innerHTML：元素独有的属性,可以编辑该元素的内容,甚至更改元素(如h2->h1)
			2.textContent：该属性会获得一个标签里的所有文本信息(只有文本信息,即使该标签内部还有标签,也会获取所有内部标签的文本)
	
		常用属性：
			1.parentNode(Node)：当前节点的唯一父节点对象
			  parentElementNode(Node)：当前节点的父元素节点
			2.childNodes(NodeList)：当前节点的所有子节点,组成一个集合
			  children(NodeList)：当前当前节点的所有元素子节点
			3.firstChild(Node)：当前节点的第一个子节点
			  firstElementChild：当前节点的第一个元素子节点
			4.lastChild(Node)：当前节点的最后一个子节点
			  lastEleMentChild：当前节点的最后一个元素子节点
			5.nextSibling(Node)：当前节点的下一个兄弟节点
			  nextElementSibling：当前节点的下一个兄弟元素节点
			6.previousSibling(Node)：当前节点的前一个兄弟节点
			  previousElementSibling：当前节点的前一个兄弟元素节点
			7.nodeName(string)：节点名称
			8.nodeType(Number)：节点类型
				↑↑↑元素节点：1、属性节点：2、文本节点：3、注释节点：8、文档节点：9
			9.nodeValue(string)：节点值
			10.document.all：返回网页内的所有标签节点
			   document.all['id']：返回指定id节点
			   document.all.ID：同上
			   document.all['name']：返回网页内拥有指定属性name值得节点
			   document.all.tags['tagName']：返回网页内指定的标签
			
		常用方法：
			1.getElementById()：返回带指定ID的对象，该方法只有document有权限可以调用
			2.getElementsByTagName()：返回带指定标签名的对象的集合
			3.getElementsByClassName()：返回带指定Class的对象
			4.appendChild()：添加一个子节点
			5.removeChild()：删除一个子节点removeChild(newNode,oldNode),返回值为被删除的对象
			6.replaceChild()：替换一个子节点replaceChild(newNode,oldNode),返回值为被替换的对象
			7.insertBefore()：在某个节点之前插入一个元素Node.insertBefore(newNode,reforeNode)
			8.createAttribute()：创建一个属性节点
			9.createElement()：创建一个元素节点
			10.createTextNode()：创建一个文本节点
			11.getAttribute()：获得属性
			12.setAttribute()：设置属性
				例：(为什么这里有例？上面那些都没有,因为这个我没用过)
					1.	var att = document.createAttribute("class");
						att.nodeValue = "abcd";
						var h1 = document.getElementById("title");
						h1.setAttributeNode(att);
					2.h1.setAttribute('class',变量);		--1号方式IE8及以下版本支持,该方式浏览器版本得高
					
			13.removeAttribute()：删除属性,Node.removeAttribute(attrName),返回值为被删除的节点
			   removeAttributeNode()：效果同上
			14.hasAttrributes()：是否拥有指定属性,返回true
			15.getElementByName()：返回带制定name属性值的所有子元素，该方法只有document有权限可以调用
			16.querySelector()：返回第一个匹配的对象,该方法普通的node节点也可以使用
				例：document.querySelector('#d .h'),该参数可以传在CSS样式里的所有选择器,比如：后代选择器、ID选择器、类选择器。比上面的get一些的选择器好多了
				
			17.querySelectorAll()：返回全部匹配的对象,同上
			18.bind()：将一个对象绑定到一个函数上
				例：
					function a(此处需要一个this对象,也就是调用该函数的对象本省){...}
					原本语法：<a herf="" onclick = "a(this)">考勤管理</a>
					
					但我想要用document的addEventListener来往该元素上添加一个事件,而不让它显示在标签上
					//省略获取a标签数组
					for(){
						a[i].addEventListener('click',a.bind(this,a[i]));
					}
			
		Document创建节点：
			1.createDocumentFragment()：该方法创建一个可以包括其他子节点的集合(以下称文档片段),待所有子节点添加完成后,在将整个文档片段添加到DOM(HTML文档)树中,从而提高页面的渲染效率,防止页面闪屏问题
			
			
			
8.对象
	创建自定义对象的4种方式：
		1.var obj1 = new Object();
		2.var obj2 = {};
			例：var obj2 = {"a":"中国","b":"美国","b":"日本"};		--当键为数字时,只能通过obj2[1]来调用,反之可以用.操作符来调用
		上面两种适合创建单个对象
		3.function Emp(){};   var obj3 = new Emp();		--该方式定义属性需要使用this.来定义属性,因为一个函数继承与Object,没有this的话就定义到别的地方了
		4.var obj4 = Object.create(指定对象名(将以该对象作为父对象));
	
	原型：prototype
	
	定义私有属性：
		1.在函数内：用var 定义
		2.在函数外：用对象.属性名定义
	
	定义公有属性：
		1.在函数中：this.属性名定义
		2.在函数外：函数名.prototype.属性名 = 默认值;定义
	
	定义私有方法：
		1.在函数中：var方法名 = function(){}
		2.在函数外：采用对象.方法名 = function(){}
	
	定义公有方法：
		1.在函数中：采用 this.方法名 = function(){}
		2.在函数外：采用 函数名.prototype.方法名 = function(){}
	
	定义静态属性和静态方法：函数名.属性/方法
		例：person.name = "张三";、person.show=function(){alert("我是方法")}
	
	构造函数：函数名不要重复,因为先定义的函数永远调用不到
	
	JS访问器：
		Get访问器：get size(){};		使用方法：对象名.size
		Set访问器：set size(value){};	使用方法：对象名.size = 100;
		其本质为两个函数
		属性的特征：
			1.writable(bool)：属性值是否可以改变
			2.enumerable(bool)：属性值是否可被枚举,如被for/in、Object.keys()操作
			3.configurable(bool)：属性特征(除value外),是否可被重新配置
			例：
				var e1 = {};
				Object.defineProperty(对象名(e1),属性名("Name"),{		--注意Object大写首字母,我终于体会到了打代码五分钟,找bug2小时的感觉
					value:'Tom',
					writable:true,
					enumerable:true,
					configurable:true
				});
		
		定义访问器属性特性：
			1.set
			2.get
			3.enumerable(bool)：属性值是否可被枚举,如被for/in、Object.keys()操作
			4.configurable(bool)：属性特征(除value外),是否可被重新配置
			例：
				var e1 = {};
				Object.defineProperty(对象名(e1),属性名("Name"),{
					get:function(){
					},
					set:function(value){
					},
					enumerable:true,
					configurable:true
				});
	
	对象继承：
		1.在外部：Object.setPrototypeOf(要继承的对象(子对象),被继承的对象(父对象))
			例：
			var a = {
				name: "a"
			}
			var b = {
				age: 10
			}
			Object.setPrototypeOf(b,a);
		  在内部：Object.setPrototypeOf(要继承的对象(子对象),被继承的对象(父对象))
			例：
			function zaiju(name, sudu) {
				this.name = name;
				this.sudu = sudu;
				this.kaiche = function () {
					console.log(name + "正在开");
				}
			}
			第一种在内部继承：该方式一个子对象对一个父对象
			function che(name, sudu, yanse) {
				Object.setPrototypeOf(this, new zaiju(name, sudu));
				this.yanse = yanse;
				this.shuo = function () {
					console.log("这是辆" + yanse + "的车 ");
				}
			}
			第二种在内部继承：该方式多个子对象对一个父对象
			var zj = new zaiju('',10);
			function che(name, sudu, yanse) {
				Object.setPrototypeOf(this, zj);
				this.yanse = yanse;
				this.shuo = function () {
					console.log("这是辆" + yanse + "的车 ");
				}
			}
			
		2.子对象.prototype = new 父对象();
			例：
				function a(){
					this.name = "a";
				}
				function b(){
				}
				b.prototype = new a();
	
	所有对象的父对象：Object.prototype

9.JS错误列表
	1.ReferenceError：指针指向异常(找不到对象);		--当发生该错误时,就表示,你正在寻找一个未声明过得变量,注意变量名是否使用正确
	2.not defined：undefined(未定义)表示空的,啥也没有,那么defined是定义的意思,not(不) defined(定义)就是没有定义的意思