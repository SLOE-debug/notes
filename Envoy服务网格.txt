0.什么是Envoy：
	Envoy 是L7代理和通信总线,专为面向大型现代服务的体系结构而设计.该项目是基于以下信念而诞生的：
		网络对应用程序应该是透明的.当确实发生网络和应用程序问题时,应该容易确定问题的根源.
	
	流程外架构： Envoy是一个自包含的流程,旨在与每个应用程序服务器一起运行
		Envoy 可与任何应用程序语言一起使用,在各种语言之间形成网格
		Envoy可以透明地在整个基础架构中快速部署和升级.
	
	L3/L4过滤器体系结构：可插入的过滤器链机制允许编写过滤器以执行不同的基于L3/L4 网络代理的TCP/UDP代理任务，并将其插入主服务器
		已经编写了过滤器来支持各种任务,例如原始TCP代理,UDP代理,HTTP代理,TLS客户端证书认证,Redis,MongoDB,Postgres等
	
	HTTP L7筛选器体系结构：HTTP是现代应用程序体系结构的关键组成部分,Envoy支持附加的HTTP L7筛选器层.
		可以将HTTP筛选器插入HTTP连接管理子系统,该子系统执行不同的任务
		例如缓冲，速率限制，路由/转发，嗅探Amazon的DynamoDB等。
	
	一流的HTTP/2支持：服务配置使用所有Envoy之间的HTTP/2来创建持久连接的网格,可以在请求连接和响应之间进行多路复用
	
	HTTP L7路由：在HTTP模式下运行时,Envoy支持一个路由子系统,该子系统能够基于路径、权限、内容类型、运行时值等来路由和重定向请求.
		当使用Envoy作为前端/边缘时,此功能最有用代理,但在构建服务到服务网格时也会利用该代理.
	
	gRPC支持：gRPC是Google的RPC框架,使用HTTP/2作为基础的多路复用传输.
		Envoy支持所有HTTP/2功能,这些功能必须用作gRPC请求和响应的路由和负载平衡基础.这两个系统是非常互补的
	
	服务发现和动态配置：Envoy可以选择使用一组分层的动态配置API进行集中管理.
		这些层为Envoy提供有关以下方面的动态更新：后端集群中的主机,后端集群本身,HTTP路由,侦听套接字和加密材料.
		对于更简单的部署,可以通过DNS解析(甚至完全跳过)来完成后端主机发现,而将其他层替换为静态配置文件.
	
	运行状况检查：构建Envoy网格的推荐方法是将服务发现视为最终一致的过程.
		Envoy包括一个运行状况检查子系统,该子系统可以有选择地对上游服务集群执行活动的运行状况检查.
		Envoy使用服务发现和运行状况检查信息的结合来确定运行状况良好的负载平衡目标.
		Envoy还通过异常值检测子系统支持被动健康检查.
	
	高级负载平衡：分布式系统中不同组件之间的负载平衡是一个复杂的问题.
		因为Envoy是一个自包含的代理而不是一个库,所以它能够在一个地方实现高级负载平衡技术,并使任何应用程序都可以访问它们.
		目前,Envoy包括对自动重试、断路、通过外部速率限制服务进行全局速率限制、请求屏蔽和异常检测的支持.计划为请求竞赛提供将来的支持.
	
	前端/边缘代理支持：在边缘使用相同的软件(可观察性,管理,相同的服务发现和负载平衡算法等)具有很大的好处.
		Envoy具有一项功能集,使其非常适合作为大多数现代Web应用程序用例的边缘代理.
		这包括TLS终止，HTTP / 1.1和HTTP / 2支持以及HTTP L7路由。
	
	一流的可观察性：如上所述,Envoy的主要目标是使网络透明.
		但是,问题在网络级别和应用程序级别均会发生.
		Envoy包括对所有子系统的强大统计支持.
		statsd(和兼容的提供程序)是当前受支持的统计接收器,尽管插入其他数据接收器并不困难.
		还可以通过管理端口查看统计信息。Envoy还支持通过第三方提供商进行分布式 跟踪.

1.基础
	术语：
		主机：能够进行网络通信的实体(手机、服务器上的应用程序)
			在Envoy中主机是逻辑网络应用程序.一个物理硬件可以在其上运行多个主机,只要它们中的每一个都可以独立寻址即可
		
		下游：下游主机连接到Envoy，发送请求并接收响应。
		
		上游：上游主机从Envoy接收连接和请求，并返回响应。
		
		侦听器：侦听器是可以由下游客户端连接到的命名网络位置(例如,端口,Unix域套接字等).
			Envoy公开了下游主机连接到的一个或多个侦听器。
		
		群集：群集是Envoy连接到的一组逻辑相似的上游主机.
			Envoy通过服务发现来发现集群的成员.
			它可以选择通过主动运行状况检查来确定集群成员的运行状况.
			Envoy将请求路由到的群集成员由负载平衡策略确定
		
		网格：一组主机以进行协调以提供一致的网络拓扑.
			"Envoy网格"是一组Envoy代理,它们构成了由许多不同服务和应用程序平台组成的分布式系统的消息传递基础.
		
		运行时配置：与Envoy一起部署的带外实时配置系统.可以更改配置设置,这将影响操作,而无需重新启动Envoy或更改主要配置.
	
	线程模型：
		Envoy使用具有多个线程体系结构的单个进程
		Envoy被编写为100％无阻塞
		我们建议将工作线程的数量配置为等于计算机上的硬件线程的数量
	
	侦听器链接平衡：默认情况下,工作线程之间没有协调,各自处理各自的
		但对于Http2/gRPC这种长连接可能需要让Envoy强制平衡工作线程之间的连接.
		为了支持此行为,Envoy允许在每个侦听器上配置不同类型的连接平衡.
	
	监听：Envoy配置在单个进程中支持任意数量的侦听器.通常,无论配置了多少个侦听器,我们都建议每台计算机运行一个Envoy
		Envoy支持TCP和UDP侦听器：
			TCP：每个侦听器都独立配置有一些数字筛选器链，其中根据其匹配条件选择单个链
				单个过滤器链由一个或多个网络级别(L3/L4)过滤器组成
				当在侦听器上收到新连接时,将选择适当的筛选器链
				并实例化已配置的连接本地筛选器堆栈,并开始处理后续事件.
				通用侦听器体系结构用于执行Envoy所使用的绝大多数不同代理任务
				例如,速率限制,TLS客户端身份验证,HTTP连接管理,MongoDB嗅探,原始TCP代理 等等.
			
			UDP：
				Envoy还支持UDP侦听器,尤其是UDP侦听器过滤器.
				UDP侦听器筛选器每个工作程序实例化一次,并且对于该工作程序是全局的.
				每个侦听器筛选器都会处理工作人员在端口上侦听的每个UDP数据报
		
	侦听器过滤器：过滤器可用于操纵连接的元数据.
		过滤器的主要目的是通过不需要更改Envoy核心功能来使添加其他系统集成功能更加容易,并且使多个此类功能之间的交互更加明确
		侦听器筛选器的API相对简单,因为最终这些筛选器将在新接受的套接字上运行.
		链中的过滤器可以停止,然后继续迭代以进一步过滤.
		这样就可以实现更复杂的方案,例如调用速率限制服务等.

	网络过滤器：网络过滤器链接在一个称为过滤器链的有序列表中.
		每个侦听器都有多个过滤器链和一个可选的默认过滤器链,与每个过滤器链相关联.
		如果找不到最匹配的过滤器链,则将选择默认过滤器链来满足请求.
		如果未提供默认过滤器链,则连接将关闭.
	
2.入门
	运行特使：
		先决条件,已经安装了特使
		查看Envoy版本：docker run --rm envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e --version
		运行一个默认的 Envoy：docker run --rm -it \
							-p 9901:9901 \
							-p 10000:10000 \ 
							envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e
		
		运行自定义配置的 Envoy：docker run --rm -it \
								  -v $(pwd)/envoy-custom.yaml:/envoy-custom.yaml \
								  -p 9901:9901 \
								  -p 10000:10000 \
								  envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e \
									  -c /envoy-custom.yaml
		
		检查是否成功：curl -v localhost:10000
		
		覆盖默认配置(合并)：使用--config-yaml该配置将与主配置合并 此选项只能指定一次
			envoy-override.yaml
				admin:
				  address:
					socket_address:
					  port_value: 9902
			
			docker run --rm -it \
			  -p 9902:9902 \
			  -p 10000:10000 \
			  envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e \
				  -c /etc/envoy/envoy.yaml \
				  --config-yaml "$(cat envoy-override.yaml)"
		
		使用 model 参数 验证配置文件是否有误：
			docker run --rm -it \
							-p 9901:9901 \
							-p 10000:10000 \ 
							envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e
							--model validate
			没错误打印OK返回状态码为0,反之打印错误并以1退出
		
		配置日志：默认日志发送到 /dev/stderr
			使用 --log-path 自定义路径
			mkdir logs
			chmod go+rwx logs/
			docker run --rm -it \
							-p 9901:9901 \
							-p 10000:10000 \ 
							envoyproxy/envoy-dev:4622fee2cbcc7e5f7e9782d384ccbaae6c715d7e
							--log-path logs/custom.log
		
		